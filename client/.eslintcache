[{"/Users/Cristina/Desktop/nimbus/client/src/index.js":"1","/Users/Cristina/Desktop/nimbus/client/src/App.js":"2","/Users/Cristina/Desktop/nimbus/client/src/reportWebVitals.js":"3","/Users/Cristina/Desktop/nimbus/client/src/components/BaseLayout.js":"4","/Users/Cristina/Desktop/nimbus/client/src/components/Login.js":"5","/Users/Cristina/Desktop/nimbus/client/src/components/Register.js":"6","/Users/Cristina/Desktop/nimbus/client/src/components/Menu.js":"7","/Users/Cristina/Desktop/nimbus/client/src/components/Weather.js":"8","/Users/Cristina/Desktop/nimbus/client/src/components/Favorites.js":"9","/Users/Cristina/Desktop/nimbus/client/src/store/reducer.js":"10","/Users/Cristina/Desktop/nimbus/client/src/components/getCityFromCoordinates.js":"11","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeather.js":"12","/Users/Cristina/Desktop/nimbus/client/src/components/DailyWeather.js":"13","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeatherDetails.js":"14","/Users/Cristina/Desktop/nimbus/client/src/components/Cloud.js":"15","/Users/Cristina/Desktop/nimbus/client/src/components/Footer.js":"16"},{"size":1663,"mtime":1607127219121,"results":"17","hashOfConfig":"18"},{"size":634,"mtime":1607027180063,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1606938376446,"results":"20","hashOfConfig":"18"},{"size":378,"mtime":1607565039199,"results":"21","hashOfConfig":"18"},{"size":2453,"mtime":1607567517045,"results":"22","hashOfConfig":"18"},{"size":3697,"mtime":1607567772554,"results":"23","hashOfConfig":"18"},{"size":4293,"mtime":1607557560023,"results":"24","hashOfConfig":"18"},{"size":3223,"mtime":1607541477559,"results":"25","hashOfConfig":"18"},{"size":155,"mtime":1607035394693,"results":"26","hashOfConfig":"18"},{"size":3551,"mtime":1607546930326,"results":"27","hashOfConfig":"18"},{"size":1224,"mtime":1607310371000,"results":"28","hashOfConfig":"18"},{"size":1008,"mtime":1607556621209,"results":"29","hashOfConfig":"18"},{"size":222,"mtime":1607548509031,"results":"30","hashOfConfig":"18"},{"size":1674,"mtime":1607547194130,"results":"31","hashOfConfig":"18"},{"size":1657,"mtime":1607554649501,"results":"32","hashOfConfig":"18"},{"size":194,"mtime":1607565252129,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1uruq8z",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/Cristina/Desktop/nimbus/client/src/index.js",[],["75","76"],"/Users/Cristina/Desktop/nimbus/client/src/App.js",["77"],"import logo from './logo.svg';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  //define function to get current location on load\n    function getLocation() {\n     // if statement for when page loads, if user's device supports geolocation, \n     // we will get their coordinates on load\n     console.log(navigator)\n     if (navigator.geolocation) {\n       navigator.geolocation.getCurrentPosition( function (position) {\n         console.log(position)\n       })\n     }\n   }\n   getLocation()\n\n  return (\n    <div className=\"App\">\n      <h1>App Component</h1>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/Cristina/Desktop/nimbus/client/src/reportWebVitals.js",[],"/Users/Cristina/Desktop/nimbus/client/src/components/BaseLayout.js",["78","79","80","81"],"import React, { useState, useEffect } from \"react\";\nimport Menu from \"../components/Menu\"\nimport Navbar from \"react-bootstrap/Navbar\"\nimport Button from \"react-bootstrap/Button\"\nimport Footer from \"./Footer\";\n\nfunction BaseLayout(props) {\n  return (\n    <div>\n      <Menu {...props} ></Menu>\n      {props.children}\n      <Footer />\n    </div>\n  );\n}\n\nexport default BaseLayout;\n","/Users/Cristina/Desktop/nimbus/client/src/components/Login.js",["82"],"/Users/Cristina/Desktop/nimbus/client/src/components/Register.js",["83"],"/Users/Cristina/Desktop/nimbus/client/src/components/Menu.js",["84","85"],"import React, { useState, useEffect } from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Button from \"react-bootstrap/Button\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Form from \"react-bootstrap/Form\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport { NavLink } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport '../styles/menu.css'\nimport Cloud from \"./Cloud\";\n\nfunction Menu(props) {\n  // need a local state to store the city user entered in textbox\n  // Give a blank initial value for the state\n  const [city, setCity] = useState(\"miami\");\n\n  // function that saves what the user types in\n  const handleChange = (e) => {\n    setCity(e.target.value);\n    \n  };\n\n  console.log(props)\n\n  // use city in local state to get lat and lng with google maps API\n  const getLatandLongByAddress = async () => {\n    let formattedAddress = city.split(\" \").join(\"+\");\n    let url = `https://maps.googleapis.com/maps/api/geocode/json?address=${formattedAddress}&result_type=locality&key=AIzaSyDHy8QmVO1C4nSFZhTo9KZZ24Py0IuHrY4`;\n\n    let response = await axios.get(url);\n    let result = response.data\n    let coordsObject = result.results[0].geometry.location;\n    //console.log(coordsObject.lat)\n    //console.log(coordsObject.lng)\n    return coordsObject\n    \n  }\n\n  // function to get weather from lat and long obtained from\n  // getLatandLongByAddress function above\n  // Will take in a lat and lng\n  const getWeatherBySearch =  async (lat, lng) => {\n     const apiKey = `00b0dda3295804976daaf4ca564bdf04`;\n       let apiURL = `https://api.openweathermap.org/data/2.5/onecall`;\n        const response = await axios.get(apiURL, {\n          params: {\n            lat: lat,\n            lon: lng,\n            exclude: \"minutely\",\n            appid: apiKey,\n            units: \"imperial\",\n          },\n        });\n        const result = response.data\n        console.log(result)\n        props.onFetchWeather({ ...result, city })\n        return result\n  }\n\n\n  const handleSearch = async () => {\n    const locationObject =  await getLatandLongByAddress();\n    console.log(locationObject)\n    const weather = await getWeatherBySearch(locationObject.lat, locationObject.lng)\n    console.log(weather)\n  }\n\n\n  return (\n    <div className=\"navbar-div\">\n      <Navbar className=\"color-nav\" expand=\"lg\">\n        <Navbar.Brand href=\"/weather\">\n          <div className=\"main-title\">\n            <Cloud />\n          </div>\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            {/* <Nav.Link href=\"#home\">Home</Nav.Link> */}\n            <NavLink to=\"/user/favorites\">\n              <div className=\"title\">Favorites</div>\n            </NavLink>\n            <Nav.Link href=\"#link\">\n              <div className=\"title\">Hourly Forecast</div>\n            </Nav.Link>\n            <Nav.Link href=\"#link\">\n              <div className=\"title\">7 Day Forecast</div>\n            </Nav.Link>\n            <Nav.Link href=\"#link\">\n              <div className=\"title\">Logout</div>\n            </Nav.Link>\n          </Nav>\n          <Form inline>\n            <FormControl\n              type=\"text\"\n              placeholder=\"Enter City\"\n              name=\"city\"\n              className=\"mr-sm-2\"\n              onChange={handleChange}\n            />\n            <Button variant=\"outline-primary\" onClick={handleSearch}>\n              <div className=\"title\">Search</div>\n            </Button>\n          </Form>\n        </Navbar.Collapse>\n      </Navbar>\n\n      {/* <h1>{city}</h1> */}\n    </div>\n  );\n}\n\n// Will need mapStateToProps because trying\n// want to display parts of the global state\nconst mapStateToProps = (state) => {\n    return {\n        weather: state.weather\n    }\n}\n\n// will no longer need the local state because\n// moving fetched API to redux global state\n// will need DispatchToProps because trying \n// to update global state\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onFetchWeather: (weather) => dispatch({type: 'ON_FETCHED_WEATHER', payload: weather})\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu);\n","/Users/Cristina/Desktop/nimbus/client/src/components/Weather.js",["86","87"],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport CurrentWeather from './CurrentWeather'\nimport DailyWeather from './DailyWeather'\nimport CurrentWeatherDetails from './CurrentWeatherDetails'\n\nfunction Weather(props) {\n    // make a local state to store weather object in\n    // const [weather, setWeather] = useState({\n    //     weather: {}\n    // })\n    // Will need to get current location coordinates\n    // Will need to get coordinates based on a search\n    // want to get the coordinates when the component mounts\n    useEffect(() => {\n        getLocation()\n    }, [])\n\n    function getLocation() {\n       if (navigator.geolocation) {\n           navigator.geolocation.getCurrentPosition(showCurrentPosition)\n       } \n   }\n\n    const showCurrentPosition = async (position) => {\n        console.log(position)\n       let latitude = position.coords.latitude;\n       let longitude = position.coords.longitude;\n       console.log(latitude)\n       console.log(longitude)\n       let apiKey = `00b0dda3295804976daaf4ca564bdf04`;\n       let apiURL = `https://api.openweathermap.org/data/2.5/onecall`;\n        let response = await axios.get(apiURL, {\n          params: {\n            lat: latitude,\n            lon: longitude,\n            exclude: \"minutely\",\n            appid: apiKey,\n            units: \"imperial\",\n          },\n        });\n        const result = response.data\n        console.log(result)\n        \n        apiKey = \"AIzaSyDHy8QmVO1C4nSFZhTo9KZZ24Py0IuHrY4\";\n        apiURL = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${apiKey}`;\n        response = await axios.get(apiURL);\n        const cityData = response.data;\n        let city = cityData.results[0].formatted_address.split(',')[0];\n        props.onFetchWeather({...result, city})\n   }\n    \n   //setting up a weather object\n   const currentWeatherValues = {\n     //date: new Date(props.weather.current.dt * 1000),\n    //  temp: Math.round(props.weather.current.temp),\n    //  feelsLike: Math.round(props.weather.current.feels_like),\n     //\n   };\n\n   console.log(currentWeatherValues.feelsLike)\n\n    return (\n      <div>\n        {/* <h1>Weather Component</h1> */}\n        {/* <h3>{props.weather.lat}</h3>\n        {props.weather.isWeatherLoaded ? (\n          <>\n            <h3>{props.weather.city}</h3>\n            <p>{props.weather.current.temp}</p>\n          </>\n        ) : (\n          <p>\"Loading...\"</p>\n        )} */}\n        <CurrentWeather></CurrentWeather>\n        <DailyWeather />\n        <CurrentWeatherDetails />\n      </div>\n    );\n\n\n}\n\n// Will need mapStateToProps because trying\n// want to display parts of the global state\nconst mapStateToProps = (state) => {\n    return {\n        weather: state.weather\n    }\n}\n\n// will no longer need the local state because\n// moving fetched API to redux global state\n// will need DispatchToProps because trying \n// to update global state\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onFetchWeather: (weather) => dispatch({type: 'ON_FETCHED_WEATHER', payload: weather})\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Weather)","/Users/Cristina/Desktop/nimbus/client/src/components/Favorites.js",[],"/Users/Cristina/Desktop/nimbus/client/src/store/reducer.js",["88"],"const initialState = {\n  weather: {\n    isWeatherLoaded: false,\n  },\n};\n\nconst dayjs = require('dayjs')\n\nconst reducer = (state = initialState, action) => {\n  if (action.type == \"ON_FETCHED_WEATHER\") {\n    const utcDate = new Date(action.payload.current.dt * 1000);\n    const localDate = new Date(utcDate.toLocaleString());\n    const dayOfWeek = new Intl.DateTimeFormat(\"en-US\", {\n      weekday: \"long\",\n    }).format(localDate);\n    const feels_like = Math.round(action.payload.current.feels_like);\n    const humidity = action.payload.current.humidity;\n    const temp = Math.round(action.payload.current.temp);\n    const mainDescription = action.payload.current.weather[0].main;\n    const description = action.payload.current.weather[0].description;\n    const icon = action.payload.current.weather[0].icon;\n    const wind_speed = action.payload.current.wind_speed\n    const clouds = action.payload.current.clouds\n    const uvi = action.payload.current.uvi\n\n    const utcDateSunrise = new Date(action.payload.current.sunrise * 1000);\n    const localDateSunrise = new Date(utcDateSunrise.toLocaleString());\n    const sunrise = dayjs(localDateSunrise).format(\"h:mm A\");\n\n    const utcDateSunset = new Date(action.payload.current.sunset * 1000);\n    const localDateSunset = new Date(utcDateSunset.toLocaleString());\n    const sunset = dayjs(localDateSunset).format(\"h:mm A\");\n    \n    const dailyValues = action.payload.daily.map((day) => ({\n      feels_like_day: day.feels_like.day,\n      feels_like_night: day.feels_like.night,\n      humidity: day.humidity,\n      max_temp: Math.round(day.temp.max),\n      min_temp: Math.round(day.temp.min),\n      pop: day.pop * 100,\n      mainDescription: day.weather[0].main,\n      description: day.weather[0].description,\n      icon: day.weather[0].icon,\n      date_time: (() => {\n        const utcDate = new Date(day.dt * 1000);\n        const localDate = new Date(utcDate.toLocaleString());\n        return new Intl.DateTimeFormat(\"en-US\", {\n          weekday: \"long\",\n        }).format(localDate);\n      })(),\n      sunrise: (() => {\n        const utcDate = new Date(day.sunrise * 1000);\n        const localDate = new Date(utcDate.toLocaleString());\n        return dayjs(localDate).format(\"h:mm A\");\n      })(),\n      sunset: (() => {\n        const utcDate = new Date(day.sunset * 1000);\n        const localDate = new Date(utcDate.toLocaleString());\n        return dayjs(localDate).format(\"h:mm A\");\n      })(),\n    }));\n    const hourlyValues = action.payload.hourly.map((hour) => ({\n      date_time: (() => {\n        const utcDate = new Date(hour.dt * 1000);\n        const localDate = new Date(utcDate.toLocaleString());\n        return dayjs(localDate).format(\"h A\"); \n      })(),\n      feels_like: hour.feels_like,\n      humidity: hour.humidity,\n      pop: hour.pop * 100,\n      temp: Math.round(hour.temp),\n      mainDescription: hour.weather[0].main,\n      description: hour.weather[0].description,\n      icon: hour.weather[0].icon,\n    }));\n    return {\n      ...state,\n      weather: {\n        dateTime: dayOfWeek,\n        isWeatherLoaded: true,\n        feels_like: feels_like,\n        humidity: humidity,\n        temp: temp,\n        mainDescription: mainDescription,\n        description: description,\n        icon: icon,\n        uvi: uvi,\n        wind_speed: wind_speed,\n        clouds: clouds,\n        sunrise: sunrise,\n        sunset: sunset,\n        dailyValues: dailyValues,\n        hourlyValues: hourlyValues,\n        ...action.payload,\n      },\n    };\n  }\n  return state;\n};\n\nexport default reducer;\n","/Users/Cristina/Desktop/nimbus/client/src/components/getCityFromCoordinates.js",["89"],"import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\n\n \nfunction  GetCityFromCoordinates () {\n    \n    const [city, setCity] = useState({\n      city: \"\"\n    });\n\n    let latitude = 33.93466913794421;\n    let longitude = -84.381074665022;\n    let apiKey = 'AIzaSyDHy8QmVO1C4nSFZhTo9KZZ24Py0IuHrY4'\n    let apiURL = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${apiKey}`;\n    \n    const getCity = async () => {\n        const response = await axios.get(apiURL);\n        const result = response.data\n        console.log(result.results[0].formatted_address)\n            //.results[0].address_components[3].long_name)\n        \n        \n        setCity(result.results[0].address_components[3].long_name);\n    }\n\n    useEffect(() => {\n        getCity()\n    })\n    \n    return(\n        <div>\n            <h1>Test Component</h1>\n            <h2>hi</h2>\n        </div>\n    )\n}\n\n// Sandy Springs Coordinates\n// 33.751649691183076, -84.39383248335515;\n// 33.93466913794421, -84.381074665022\n\n// Glennville\n// 31.940284662191612, -81.92454235966069\n\n//Paris coordinates\n// 48.859677617673164, 2.350486869835329\n\nexport default GetCityFromCoordinates","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeather.js",["90"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport '../styles/currentWeather.css'\n\nfunction CurrentWeather(props) {\n  return (\n    <div className=\"current-weather-div\">\n      {/* <h2>Current Weather Box</h2> */}\n      {props.weather.isWeatherLoaded ? (\n        <>\n          <h1 id=\"city\">{props.weather.city}</h1>\n          <h2>{props.weather.description}</h2>\n          <img\n            src={`http://openweathermap.org/img/wn/${props.weather.icon}@2x.png`}\n          ></img>\n          <p id=\"temp\">{props.weather.temp} &deg;F </p>\n          {/* <p> Feels Like: {props.weather.feels_like} &deg;F </p>\n          <p>💧 {props.weather.humidity} %</p>\n          <p>\n            {\" \"}\n            🌝 {props.weather.sunrise} | 🌚 {props.weather.sunset}\n          </p> */}\n        </>\n      ) : (\n        <p></p>\n      )}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n    return{\n        weather: state.weather\n    }\n}\n\nexport default connect(mapStateToProps)(CurrentWeather);\n","/Users/Cristina/Desktop/nimbus/client/src/components/DailyWeather.js",["91"],"import React from 'react'\nimport { connect } from \"react-redux\";\n\nfunction DailyWeather(props) {\n    return (\n        <div>\n            {/* <h2>Daily Weather Box</h2> */}\n        </div>\n    )\n}\n\nexport default DailyWeather","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeatherDetails.js",[],"/Users/Cristina/Desktop/nimbus/client/src/components/Cloud.js",[],"/Users/Cristina/Desktop/nimbus/client/src/components/Footer.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":1,"column":8,"nodeType":"98","messageId":"99","endLine":1,"endColumn":12},{"ruleId":"96","severity":1,"message":"100","line":1,"column":17,"nodeType":"98","messageId":"99","endLine":1,"endColumn":25},{"ruleId":"96","severity":1,"message":"101","line":1,"column":27,"nodeType":"98","messageId":"99","endLine":1,"endColumn":36},{"ruleId":"96","severity":1,"message":"102","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":14},{"ruleId":"96","severity":1,"message":"103","line":4,"column":8,"nodeType":"98","messageId":"99","endLine":4,"endColumn":14},{"ruleId":"96","severity":1,"message":"101","line":1,"column":27,"nodeType":"98","messageId":"99","endLine":1,"endColumn":36},{"ruleId":"96","severity":1,"message":"101","line":1,"column":27,"nodeType":"98","messageId":"99","endLine":1,"endColumn":36},{"ruleId":"96","severity":1,"message":"101","line":1,"column":27,"nodeType":"98","messageId":"99","endLine":1,"endColumn":36},{"ruleId":"96","severity":1,"message":"104","line":6,"column":8,"nodeType":"98","messageId":"99","endLine":6,"endColumn":19},{"ruleId":"96","severity":1,"message":"100","line":1,"column":17,"nodeType":"98","messageId":"99","endLine":1,"endColumn":25},{"ruleId":"105","severity":1,"message":"106","line":18,"column":8,"nodeType":"107","endLine":18,"endColumn":10,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":10,"column":19,"nodeType":"111","messageId":"112","endLine":10,"endColumn":21},{"ruleId":"96","severity":1,"message":"113","line":8,"column":12,"nodeType":"98","messageId":"99","endLine":8,"endColumn":16},{"ruleId":"114","severity":1,"message":"115","line":13,"column":11,"nodeType":"116","endLine":15,"endColumn":12},{"ruleId":"96","severity":1,"message":"117","line":2,"column":10,"nodeType":"98","messageId":"99","endLine":2,"endColumn":17},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'Navbar' is defined but never used.","'Button' is defined but never used.","'NavDropdown' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getLocation'. Either include it or remove the dependency array.","ArrayExpression",["120"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'city' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'connect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},"Update the dependencies array to be: [getLocation]",{"range":"123","text":"124"},[643,645],"[getLocation]"]