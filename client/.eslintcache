[{"/Users/Cristina/Desktop/nimbus/client/src/index.js":"1","/Users/Cristina/Desktop/nimbus/client/src/App.js":"2","/Users/Cristina/Desktop/nimbus/client/src/reportWebVitals.js":"3","/Users/Cristina/Desktop/nimbus/client/src/components/BaseLayout.js":"4","/Users/Cristina/Desktop/nimbus/client/src/components/Login.js":"5","/Users/Cristina/Desktop/nimbus/client/src/components/Register.js":"6","/Users/Cristina/Desktop/nimbus/client/src/components/Menu.js":"7","/Users/Cristina/Desktop/nimbus/client/src/components/Weather.js":"8","/Users/Cristina/Desktop/nimbus/client/src/components/Favorites.js":"9","/Users/Cristina/Desktop/nimbus/client/src/store/reducer.js":"10","/Users/Cristina/Desktop/nimbus/client/src/components/getCityFromCoordinates.js":"11","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeather.js":"12","/Users/Cristina/Desktop/nimbus/client/src/components/DailyWeather.js":"13","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeatherDetails.js":"14","/Users/Cristina/Desktop/nimbus/client/src/components/Cloud.js":"15","/Users/Cristina/Desktop/nimbus/client/src/components/Footer.js":"16","/Users/Cristina/Desktop/nimbus/client/src/components/HourlyWeather.js":"17"},{"size":1658,"mtime":1607702657558,"results":"18","hashOfConfig":"19"},{"size":634,"mtime":1607027180063,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1606938376446,"results":"21","hashOfConfig":"19"},{"size":378,"mtime":1607565039199,"results":"22","hashOfConfig":"19"},{"size":3238,"mtime":1607721982764,"results":"23","hashOfConfig":"19"},{"size":3697,"mtime":1607567772554,"results":"24","hashOfConfig":"19"},{"size":4299,"mtime":1607713508396,"results":"25","hashOfConfig":"19"},{"size":3293,"mtime":1607635087381,"results":"26","hashOfConfig":"19"},{"size":1629,"mtime":1607728440997,"results":"27","hashOfConfig":"19"},{"size":3610,"mtime":1607713436758,"results":"28","hashOfConfig":"19"},{"size":1224,"mtime":1607310371000,"results":"29","hashOfConfig":"19"},{"size":1207,"mtime":1607641284661,"results":"30","hashOfConfig":"19"},{"size":2052,"mtime":1607630494334,"results":"31","hashOfConfig":"19"},{"size":1674,"mtime":1607547194130,"results":"32","hashOfConfig":"19"},{"size":1657,"mtime":1607554649501,"results":"33","hashOfConfig":"19"},{"size":194,"mtime":1607565252129,"results":"34","hashOfConfig":"19"},{"size":831,"mtime":1607641171215,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uruq8z",{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"41"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"41"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"41"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"41"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"41"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"41"},"/Users/Cristina/Desktop/nimbus/client/src/index.js",[],"/Users/Cristina/Desktop/nimbus/client/src/App.js",["79"],"import logo from './logo.svg';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  //define function to get current location on load\n    function getLocation() {\n     // if statement for when page loads, if user's device supports geolocation, \n     // we will get their coordinates on load\n     console.log(navigator)\n     if (navigator.geolocation) {\n       navigator.geolocation.getCurrentPosition( function (position) {\n         console.log(position)\n       })\n     }\n   }\n   getLocation()\n\n  return (\n    <div className=\"App\">\n      <h1>App Component</h1>\n    </div>\n  );\n}\n\nexport default App;\n",["80","81"],"/Users/Cristina/Desktop/nimbus/client/src/reportWebVitals.js",[],"/Users/Cristina/Desktop/nimbus/client/src/components/BaseLayout.js",["82","83","84","85"],"import React, { useState, useEffect } from \"react\";\nimport Menu from \"../components/Menu\"\nimport Navbar from \"react-bootstrap/Navbar\"\nimport Button from \"react-bootstrap/Button\"\nimport Footer from \"./Footer\";\n\nfunction BaseLayout(props) {\n  return (\n    <div>\n      <Menu {...props} ></Menu>\n      {props.children}\n      <Footer />\n    </div>\n  );\n}\n\nexport default BaseLayout;\n","/Users/Cristina/Desktop/nimbus/client/src/components/Login.js",["86"],"/Users/Cristina/Desktop/nimbus/client/src/components/Register.js",["87"],"import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { NavLink } from \"react-router-dom\";\nimport \"../styles/register.css\"\nimport Cloud from \"./Cloud\";\n\nfunction Register(props) {\n  // register component will have to hit the server\n  // create a local state to store the username\n  // and password\n  const [user, setUser] = useState({\n    username: \" \",\n    password: \" \",\n  });\n\n  // make handleonChange function so\n  const handleOnChange = (e) => {\n    setUser({\n      ...user,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  // function to create user in db\n  // passing in username and passwords as args\n  // come from the state\n  // createUser function will then be called in\n  // the handleSave function\n  //  const createUser = () => {\n  //     return fetch('http://localhost:3001/register/user', {\n  //         method: 'POST',\n  //         headers: {\n  //             'Content-Type': 'application/json'\n  //         },\n  //         body: JSON.stringify(user)\n  //     }).then(response => response.json()).then(result => {\n  //         console.log(result)\n  //         return(result)\n  //     })\n  //  }\n\n  const createUser = async () => {\n    const response = await fetch(\"http://localhost:3001/register/user\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(user),\n    });\n\n    const result = response.json();\n    console.log(result);\n    return result;\n  };\n\n  const handleSave = async () => {\n    let savedUser = await createUser();\n    if (savedUser) {\n      props.history.push(\"/weather\");\n    }\n  };\n\n  return (\n    <div className=\"register-div\">\n      <div className=\"title-logo\">\n        <Cloud />\n        <h3>Nimbus</h3>\n      </div>\n\n      <Form>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label></Form.Label>\n          <Form.Control\n            class=\"input-sizing\"\n            type=\"username\"\n            placeholder=\"Enter email\"\n            onChange={handleOnChange}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Label></Form.Label>\n          <Form.Control\n            class=\"input-sizing\"\n            type=\"password\"\n            placeholder=\"Password\"\n            onChange={handleOnChange}\n          />\n        </Form.Group>\n\n        <Button size=\"lg\"className=\"button-color\" variant=\"light\" onClick={handleSave}>\n          <div className=\"button-text\">Login</div>\n        </Button>\n      </Form>\n\n      <p>\n        Already have an account?{\" \"}\n        <NavLink to=\"/\">\n          <span className=\"link\">Sign In</span>\n        </NavLink>\n      </p>\n    </div>\n\n    // <div className=\"register-div\">\n    //   <h2>Register</h2>\n    //   <Form>\n    //     <Form.Group controlId=\"formBasicEmail\">\n    //       <Form.Label>Username</Form.Label>\n    //       <Form.Control\n    //         type=\"text\"\n    //         placeholder=\"Enter username\"\n    //         name=\"username\"\n    //         onChange={handleonChange}\n    //       />\n    //     </Form.Group>\n\n    //     <Form.Group controlId=\"formBasicPassword\">\n    //       <Form.Label>Password</Form.Label>\n    //       <Form.Control\n    //         type=\"password\"\n    //         placeholder=\"Password\"\n    //         name=\"password\"\n    //         onChange={handleonChange}\n    //       />\n    //     </Form.Group>\n    //     <Button variant=\"primary\" onClick={handleSave}>\n    //       Register\n    //     </Button>\n    //   </Form>\n    //   <p>\n    //     Already have an account? <NavLink to=\"/\">Sign in</NavLink>\n    //   </p>\n    // </div>\n  );\n}\n\nexport default Register;\n","/Users/Cristina/Desktop/nimbus/client/src/components/Menu.js",["88","89"],"/Users/Cristina/Desktop/nimbus/client/src/components/Weather.js",["90","91"],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport CurrentWeather from './CurrentWeather'\nimport DailyWeather from './DailyWeather'\nimport CurrentWeatherDetails from './CurrentWeatherDetails'\nimport HourlyWeather from './HourlyWeather'\n\nfunction Weather(props) {\n    // make a local state to store weather object in\n    // const [weather, setWeather] = useState({\n    //     weather: {}\n    // })\n    // Will need to get current location coordinates\n    // Will need to get coordinates based on a search\n    // want to get the coordinates when the component mounts\n    useEffect(() => {\n        getLocation()\n    }, [])\n\n    function getLocation() {\n       if (navigator.geolocation) {\n           navigator.geolocation.getCurrentPosition(showCurrentPosition)\n       } \n   }\n\n    const showCurrentPosition = async (position) => {\n        console.log(position)\n       let latitude = position.coords.latitude;\n       let longitude = position.coords.longitude;\n       console.log(latitude)\n       console.log(longitude)\n       let apiKey = `00b0dda3295804976daaf4ca564bdf04`;\n       let apiURL = `https://api.openweathermap.org/data/2.5/onecall`;\n        let response = await axios.get(apiURL, {\n          params: {\n            lat: latitude,\n            lon: longitude,\n            exclude: \"minutely\",\n            appid: apiKey,\n            units: \"imperial\",\n          },\n        });\n        const result = response.data\n        console.log(result)\n        \n        apiKey = \"AIzaSyDHy8QmVO1C4nSFZhTo9KZZ24Py0IuHrY4\";\n        apiURL = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${apiKey}`;\n        response = await axios.get(apiURL);\n        const cityData = response.data;\n        let city = cityData.results[0].formatted_address.split(',')[0];\n        props.onFetchWeather({...result, city})\n   }\n    \n   //setting up a weather object\n   const currentWeatherValues = {\n     //date: new Date(props.weather.current.dt * 1000),\n    //  temp: Math.round(props.weather.current.temp),\n    //  feelsLike: Math.round(props.weather.current.feels_like),\n     //\n   };\n\n   console.log(currentWeatherValues.feelsLike)\n\n    return (\n      <div>\n        {/* <h1>Weather Component</h1> */}\n        {/* <h3>{props.weather.lat}</h3>\n        {props.weather.isWeatherLoaded ? (\n          <>\n            <h3>{props.weather.city}</h3>\n            <p>{props.weather.current.temp}</p>\n          </>\n        ) : (\n          <p>\"Loading...\"</p>\n        )} */}\n        <CurrentWeather></CurrentWeather>\n        <HourlyWeather />\n        <DailyWeather />\n        <CurrentWeatherDetails />\n      </div>\n    );\n\n\n}\n\n// Will need mapStateToProps because trying\n// want to display parts of the global state\nconst mapStateToProps = (state) => {\n    return {\n        weather: state.weather\n    }\n}\n\n// will no longer need the local state because\n// moving fetched API to redux global state\n// will need DispatchToProps because trying \n// to update global state\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onFetchWeather: (weather) => dispatch({type: 'ON_FETCHED_WEATHER', payload: weather})\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Weather)","/Users/Cristina/Desktop/nimbus/client/src/components/Favorites.js",[],"/Users/Cristina/Desktop/nimbus/client/src/store/reducer.js",["92"],"/Users/Cristina/Desktop/nimbus/client/src/components/getCityFromCoordinates.js",["93"],"import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\n\n \nfunction  GetCityFromCoordinates () {\n    \n    const [city, setCity] = useState({\n      city: \"\"\n    });\n\n    let latitude = 33.93466913794421;\n    let longitude = -84.381074665022;\n    let apiKey = 'AIzaSyDHy8QmVO1C4nSFZhTo9KZZ24Py0IuHrY4'\n    let apiURL = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${apiKey}`;\n    \n    const getCity = async () => {\n        const response = await axios.get(apiURL);\n        const result = response.data\n        console.log(result.results[0].formatted_address)\n            //.results[0].address_components[3].long_name)\n        \n        \n        setCity(result.results[0].address_components[3].long_name);\n    }\n\n    useEffect(() => {\n        getCity()\n    })\n    \n    return(\n        <div>\n            <h1>Test Component</h1>\n            <h2>hi</h2>\n        </div>\n    )\n}\n\n// Sandy Springs Coordinates\n// 33.751649691183076, -84.39383248335515;\n// 33.93466913794421, -84.381074665022\n\n// Glennville\n// 31.940284662191612, -81.92454235966069\n\n//Paris coordinates\n// 48.859677617673164, 2.350486869835329\n\nexport default GetCityFromCoordinates","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeather.js",["94"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport '../styles/currentWeather.css'\nimport Button from \"react-bootstrap/Button\"; \n\nfunction CurrentWeather(props) {\n  return (\n    <div className=\"current-weather-div\">\n      {/* <h2>Current Weather Box</h2> */}\n      {props.weather.isWeatherLoaded ? (\n        <>\n          <div className=\"favorite\">\n            <Button variant=\"outline-info\" size=\"sm\">\n              Favorite\n            </Button>\n          </div>\n          <h1 id=\"city\">{props.weather.city}</h1>\n          <h2>{props.weather.description}</h2>\n          <img\n            src={`http://openweathermap.org/img/wn/${props.weather.icon}@2x.png`}\n          ></img>\n          <p id=\"temp\">{props.weather.temp} &deg;F </p>\n          {/* <p> Feels Like: {props.weather.feels_like} &deg;F </p>\n          <p>💧 {props.weather.humidity} %</p>\n          <p>\n            {\" \"}\n            🌝 {props.weather.sunrise} | 🌚 {props.weather.sunset}\n          </p> */}\n        </>\n      ) : (\n        <p></p>\n      )}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n    return{\n        weather: state.weather\n    }\n}\n\nexport default connect(mapStateToProps)(CurrentWeather);\n","/Users/Cristina/Desktop/nimbus/client/src/components/DailyWeather.js",["95"],"import React from 'react'\nimport { connect } from \"react-redux\";\nimport \"../styles/dailyWeather.css\"\n\nfunction DailyWeather(props) {\n    console.log(props)\n    // if (!props.weather.isWeatherLoaded) {\n    //   return \"\";\n    // }\n\n    return (\n      <div className=\"daily-main-div\">\n        {props.weather.dailyValues.map((day) => (\n          <div className=\"day-div\">\n            <div className=\"weekday\">\n              <p>{day.date_time}</p>\n            </div>\n            <div className=\"icon\">\n              <img\n                src={`http://openweathermap.org/img/wn/${day.icon}@2x.png`}\n              ></img>\n            </div>\n            <div className=\"temp\">\n              <p>\n                <b>{day.max_temp} </b> | {day.min_temp} \n              </p>\n            </div>\n          </div>\n        ))}\n        {/* <div className=\"day-div\">\n          <div className=\"weekday\">\n            <p>Friday</p>\n          </div>\n          <div className=\"icon\">\n            <img src={\"http://openweathermap.org/img/wn/10d@2x.png\"}></img>\n          </div>\n          <div className=\"temp\">\n            <p>84 &deg;F</p>\n          </div>\n        </div>\n\n        <div className=\"day-div\">\n          <div className=\"weekday\">\n            <p>Saturday</p>\n          </div>\n          <div className=\"icon\">\n            <img src={\"http://openweathermap.org/img/wn/10d@2x.png\"}></img>\n          </div>\n          <div className=\"temp\">\n            <p>84 &deg;F</p>\n          </div>\n        </div>\n\n        <div className=\"day-div\">\n          <div className=\"weekday\">\n            <p>Sunday</p>\n          </div>\n          <div className=\"icon\">\n            <img src={\"http://openweathermap.org/img/wn/10d@2x.png\"}></img>\n          </div>\n          <div className=\"temp\">\n            <p>84 &deg;F</p>\n          </div>\n        </div> */}\n      </div>\n    );\n}\n\n// need to connect to redux global store to get weather values\nconst mapStateToProps = (state) => {\n    return {\n        weather: state.weather\n    }\n}\n\n\nexport default connect(mapStateToProps)(DailyWeather)","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeatherDetails.js",[],"/Users/Cristina/Desktop/nimbus/client/src/components/Cloud.js",[],"/Users/Cristina/Desktop/nimbus/client/src/components/Footer.js",[],"/Users/Cristina/Desktop/nimbus/client/src/components/HourlyWeather.js",["96"],"import React from 'react'\nimport { connect } from 'react-redux'\nimport \"../styles/hourlyWeather.css\"\n\n\nfunction HourlyWeather(props) {\n  \n  return (\n    <div className=\"hourly-main-div\">\n      {props.weather.hourlyValues.map((hour) => (\n        <div className=\"hour-div\">\n          <div className=\"hour\">\n            <p>{hour.date_time}</p>\n          </div>\n          <div className=\"hour-icon\">\n            <img\n              src={`http://openweathermap.org/img/wn/${hour.icon}@2x.png`}\n            ></img>\n          </div>\n          <div className=\"hour-temp\">\n            <p>\n              <b>{hour.temp} </b> \n            </p>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    weather: state.weather,\n  };\n};\n\nexport default connect(mapStateToProps)(HourlyWeather)",{"ruleId":"97","severity":1,"message":"98","line":1,"column":8,"nodeType":"99","messageId":"100","endLine":1,"endColumn":12},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"97","severity":1,"message":"105","line":1,"column":17,"nodeType":"99","messageId":"100","endLine":1,"endColumn":25},{"ruleId":"97","severity":1,"message":"106","line":1,"column":27,"nodeType":"99","messageId":"100","endLine":1,"endColumn":36},{"ruleId":"97","severity":1,"message":"107","line":3,"column":8,"nodeType":"99","messageId":"100","endLine":3,"endColumn":14},{"ruleId":"97","severity":1,"message":"108","line":4,"column":8,"nodeType":"99","messageId":"100","endLine":4,"endColumn":14},{"ruleId":"97","severity":1,"message":"106","line":1,"column":27,"nodeType":"99","messageId":"100","endLine":1,"endColumn":36},{"ruleId":"97","severity":1,"message":"106","line":1,"column":27,"nodeType":"99","messageId":"100","endLine":1,"endColumn":36},{"ruleId":"97","severity":1,"message":"106","line":1,"column":27,"nodeType":"99","messageId":"100","endLine":1,"endColumn":36},{"ruleId":"97","severity":1,"message":"109","line":6,"column":8,"nodeType":"99","messageId":"100","endLine":6,"endColumn":19},{"ruleId":"97","severity":1,"message":"105","line":1,"column":17,"nodeType":"99","messageId":"100","endLine":1,"endColumn":25},{"ruleId":"110","severity":1,"message":"111","line":19,"column":8,"nodeType":"112","endLine":19,"endColumn":10,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":13,"column":19,"nodeType":"116","messageId":"117","endLine":13,"endColumn":21},{"ruleId":"97","severity":1,"message":"118","line":8,"column":12,"nodeType":"99","messageId":"100","endLine":8,"endColumn":16},{"ruleId":"119","severity":1,"message":"120","line":19,"column":11,"nodeType":"121","endLine":21,"endColumn":12},{"ruleId":"119","severity":1,"message":"120","line":19,"column":15,"nodeType":"121","endLine":21,"endColumn":16},{"ruleId":"119","severity":1,"message":"120","line":16,"column":13,"nodeType":"121","endLine":18,"endColumn":14},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["122"],"no-negated-in-lhs",["123"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'Navbar' is defined but never used.","'Button' is defined but never used.","'NavDropdown' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getLocation'. Either include it or remove the dependency array.","ArrayExpression",["124"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'city' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},"Update the dependencies array to be: [getLocation]",{"range":"127","text":"128"},[687,689],"[getLocation]"]