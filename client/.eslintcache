[{"/Users/Cristina/Desktop/nimbus/client/src/index.js":"1","/Users/Cristina/Desktop/nimbus/client/src/App.js":"2","/Users/Cristina/Desktop/nimbus/client/src/reportWebVitals.js":"3","/Users/Cristina/Desktop/nimbus/client/src/components/BaseLayout.js":"4","/Users/Cristina/Desktop/nimbus/client/src/components/Login.js":"5","/Users/Cristina/Desktop/nimbus/client/src/components/Register.js":"6","/Users/Cristina/Desktop/nimbus/client/src/components/Menu.js":"7","/Users/Cristina/Desktop/nimbus/client/src/components/Weather.js":"8","/Users/Cristina/Desktop/nimbus/client/src/components/Favorites.js":"9","/Users/Cristina/Desktop/nimbus/client/src/store/reducer.js":"10","/Users/Cristina/Desktop/nimbus/client/src/components/getCityFromCoordinates.js":"11","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeather.js":"12","/Users/Cristina/Desktop/nimbus/client/src/components/DailyWeather.js":"13","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeatherDetails.js":"14","/Users/Cristina/Desktop/nimbus/client/src/components/Cloud.js":"15"},{"size":1663,"mtime":1607127219121,"results":"16","hashOfConfig":"17"},{"size":634,"mtime":1607027180063,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1606938376446,"results":"19","hashOfConfig":"17"},{"size":360,"mtime":1607454719265,"results":"20","hashOfConfig":"17"},{"size":2359,"mtime":1607560339341,"results":"21","hashOfConfig":"17"},{"size":2513,"mtime":1607034911422,"results":"22","hashOfConfig":"17"},{"size":4293,"mtime":1607557560023,"results":"23","hashOfConfig":"17"},{"size":3223,"mtime":1607541477559,"results":"24","hashOfConfig":"17"},{"size":155,"mtime":1607035394693,"results":"25","hashOfConfig":"17"},{"size":3551,"mtime":1607546930326,"results":"26","hashOfConfig":"17"},{"size":1224,"mtime":1607310371000,"results":"27","hashOfConfig":"17"},{"size":1008,"mtime":1607556621209,"results":"28","hashOfConfig":"17"},{"size":222,"mtime":1607548509031,"results":"29","hashOfConfig":"17"},{"size":1674,"mtime":1607547194130,"results":"30","hashOfConfig":"17"},{"size":1657,"mtime":1607554649501,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1uruq8z",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/Cristina/Desktop/nimbus/client/src/index.js",[],["71","72"],"/Users/Cristina/Desktop/nimbus/client/src/App.js",["73"],"import logo from './logo.svg';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  //define function to get current location on load\n    function getLocation() {\n     // if statement for when page loads, if user's device supports geolocation, \n     // we will get their coordinates on load\n     console.log(navigator)\n     if (navigator.geolocation) {\n       navigator.geolocation.getCurrentPosition( function (position) {\n         console.log(position)\n       })\n     }\n   }\n   getLocation()\n\n  return (\n    <div className=\"App\">\n      <h1>App Component</h1>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/Cristina/Desktop/nimbus/client/src/reportWebVitals.js",[],"/Users/Cristina/Desktop/nimbus/client/src/components/BaseLayout.js",["74","75","76","77"],"import React, { useState, useEffect } from \"react\";\nimport Menu from \"../components/Menu\"\nimport Navbar from \"react-bootstrap/Navbar\"\nimport Button from \"react-bootstrap/Button\"\n\nfunction BaseLayout(props) {\n  return (\n    <div>\n      <Menu {...props} ></Menu>\n      {props.children}\n      <footer>Footer</footer>\n    </div>\n  );\n}\n\nexport default BaseLayout;\n","/Users/Cristina/Desktop/nimbus/client/src/components/Login.js",["78"],"/Users/Cristina/Desktop/nimbus/client/src/components/Register.js",["79"],"import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction Register(props) {\n  // register component will have to hit the server\n  // create a local state to store the username\n  // and password\n  const [user, setUser] = useState({\n    username: \" \",\n    password: \" \",\n  });\n\n  // make handleonChange function so\n  const handleonChange = (e) => {\n    setUser({\n      ...user,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  // function to create user in db\n  // passing in username and passwords as args\n  // come from the state\n  // createUser function will then be called in\n  // the handleSave function\n  //  const createUser = () => {\n  //     return fetch('http://localhost:3001/register/user', {\n  //         method: 'POST',\n  //         headers: {\n  //             'Content-Type': 'application/json'\n  //         },\n  //         body: JSON.stringify(user)\n  //     }).then(response => response.json()).then(result => {\n  //         console.log(result)\n  //         return(result)\n  //     })\n  //  }\n\n  const createUser = async () => {\n    const response = await fetch(\"http://localhost:3001/register/user\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(user),\n    });\n\n    const result = response.json();\n    console.log(result);\n    return result;\n  };\n\n  const handleSave = async () => {\n    let savedUser = await createUser();\n    if (savedUser) {\n      props.history.push(\"/weather\");\n    }\n  };\n\n  return (\n    <div className=\"register-div\">\n      <h2>Register</h2>\n      <Form>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter username\"\n            name=\"username\"\n            onChange={handleonChange}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            onChange={handleonChange}\n          />\n        </Form.Group>\n        <Button variant=\"primary\" onClick={handleSave}>\n          Register\n        </Button>\n      </Form>\n      <p>\n        Already have an account? <NavLink to=\"/\">Sign in</NavLink>\n      </p>\n    </div>\n  );\n}\n\nexport default Register;\n","/Users/Cristina/Desktop/nimbus/client/src/components/Menu.js",["80","81"],"/Users/Cristina/Desktop/nimbus/client/src/components/Weather.js",["82","83"],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport CurrentWeather from './CurrentWeather'\nimport DailyWeather from './DailyWeather'\nimport CurrentWeatherDetails from './CurrentWeatherDetails'\n\nfunction Weather(props) {\n    // make a local state to store weather object in\n    // const [weather, setWeather] = useState({\n    //     weather: {}\n    // })\n    // Will need to get current location coordinates\n    // Will need to get coordinates based on a search\n    // want to get the coordinates when the component mounts\n    useEffect(() => {\n        getLocation()\n    }, [])\n\n    function getLocation() {\n       if (navigator.geolocation) {\n           navigator.geolocation.getCurrentPosition(showCurrentPosition)\n       } \n   }\n\n    const showCurrentPosition = async (position) => {\n        console.log(position)\n       let latitude = position.coords.latitude;\n       let longitude = position.coords.longitude;\n       console.log(latitude)\n       console.log(longitude)\n       let apiKey = `00b0dda3295804976daaf4ca564bdf04`;\n       let apiURL = `https://api.openweathermap.org/data/2.5/onecall`;\n        let response = await axios.get(apiURL, {\n          params: {\n            lat: latitude,\n            lon: longitude,\n            exclude: \"minutely\",\n            appid: apiKey,\n            units: \"imperial\",\n          },\n        });\n        const result = response.data\n        console.log(result)\n        \n        apiKey = \"AIzaSyDHy8QmVO1C4nSFZhTo9KZZ24Py0IuHrY4\";\n        apiURL = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${apiKey}`;\n        response = await axios.get(apiURL);\n        const cityData = response.data;\n        let city = cityData.results[0].formatted_address.split(',')[0];\n        props.onFetchWeather({...result, city})\n   }\n    \n   //setting up a weather object\n   const currentWeatherValues = {\n     //date: new Date(props.weather.current.dt * 1000),\n    //  temp: Math.round(props.weather.current.temp),\n    //  feelsLike: Math.round(props.weather.current.feels_like),\n     //\n   };\n\n   console.log(currentWeatherValues.feelsLike)\n\n    return (\n      <div>\n        {/* <h1>Weather Component</h1> */}\n        {/* <h3>{props.weather.lat}</h3>\n        {props.weather.isWeatherLoaded ? (\n          <>\n            <h3>{props.weather.city}</h3>\n            <p>{props.weather.current.temp}</p>\n          </>\n        ) : (\n          <p>\"Loading...\"</p>\n        )} */}\n        <CurrentWeather></CurrentWeather>\n        <DailyWeather />\n        <CurrentWeatherDetails />\n      </div>\n    );\n\n\n}\n\n// Will need mapStateToProps because trying\n// want to display parts of the global state\nconst mapStateToProps = (state) => {\n    return {\n        weather: state.weather\n    }\n}\n\n// will no longer need the local state because\n// moving fetched API to redux global state\n// will need DispatchToProps because trying \n// to update global state\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onFetchWeather: (weather) => dispatch({type: 'ON_FETCHED_WEATHER', payload: weather})\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Weather)","/Users/Cristina/Desktop/nimbus/client/src/components/Favorites.js",[],"/Users/Cristina/Desktop/nimbus/client/src/store/reducer.js",["84"],"const initialState = {\n  weather: {\n    isWeatherLoaded: false,\n  },\n};\n\nconst dayjs = require('dayjs')\n\nconst reducer = (state = initialState, action) => {\n  if (action.type == \"ON_FETCHED_WEATHER\") {\n    const utcDate = new Date(action.payload.current.dt * 1000);\n    const localDate = new Date(utcDate.toLocaleString());\n    const dayOfWeek = new Intl.DateTimeFormat(\"en-US\", {\n      weekday: \"long\",\n    }).format(localDate);\n    const feels_like = Math.round(action.payload.current.feels_like);\n    const humidity = action.payload.current.humidity;\n    const temp = Math.round(action.payload.current.temp);\n    const mainDescription = action.payload.current.weather[0].main;\n    const description = action.payload.current.weather[0].description;\n    const icon = action.payload.current.weather[0].icon;\n    const wind_speed = action.payload.current.wind_speed\n    const clouds = action.payload.current.clouds\n    const uvi = action.payload.current.uvi\n\n    const utcDateSunrise = new Date(action.payload.current.sunrise * 1000);\n    const localDateSunrise = new Date(utcDateSunrise.toLocaleString());\n    const sunrise = dayjs(localDateSunrise).format(\"h:mm A\");\n\n    const utcDateSunset = new Date(action.payload.current.sunset * 1000);\n    const localDateSunset = new Date(utcDateSunset.toLocaleString());\n    const sunset = dayjs(localDateSunset).format(\"h:mm A\");\n    \n    const dailyValues = action.payload.daily.map((day) => ({\n      feels_like_day: day.feels_like.day,\n      feels_like_night: day.feels_like.night,\n      humidity: day.humidity,\n      max_temp: Math.round(day.temp.max),\n      min_temp: Math.round(day.temp.min),\n      pop: day.pop * 100,\n      mainDescription: day.weather[0].main,\n      description: day.weather[0].description,\n      icon: day.weather[0].icon,\n      date_time: (() => {\n        const utcDate = new Date(day.dt * 1000);\n        const localDate = new Date(utcDate.toLocaleString());\n        return new Intl.DateTimeFormat(\"en-US\", {\n          weekday: \"long\",\n        }).format(localDate);\n      })(),\n      sunrise: (() => {\n        const utcDate = new Date(day.sunrise * 1000);\n        const localDate = new Date(utcDate.toLocaleString());\n        return dayjs(localDate).format(\"h:mm A\");\n      })(),\n      sunset: (() => {\n        const utcDate = new Date(day.sunset * 1000);\n        const localDate = new Date(utcDate.toLocaleString());\n        return dayjs(localDate).format(\"h:mm A\");\n      })(),\n    }));\n    const hourlyValues = action.payload.hourly.map((hour) => ({\n      date_time: (() => {\n        const utcDate = new Date(hour.dt * 1000);\n        const localDate = new Date(utcDate.toLocaleString());\n        return dayjs(localDate).format(\"h A\"); \n      })(),\n      feels_like: hour.feels_like,\n      humidity: hour.humidity,\n      pop: hour.pop * 100,\n      temp: Math.round(hour.temp),\n      mainDescription: hour.weather[0].main,\n      description: hour.weather[0].description,\n      icon: hour.weather[0].icon,\n    }));\n    return {\n      ...state,\n      weather: {\n        dateTime: dayOfWeek,\n        isWeatherLoaded: true,\n        feels_like: feels_like,\n        humidity: humidity,\n        temp: temp,\n        mainDescription: mainDescription,\n        description: description,\n        icon: icon,\n        uvi: uvi,\n        wind_speed: wind_speed,\n        clouds: clouds,\n        sunrise: sunrise,\n        sunset: sunset,\n        dailyValues: dailyValues,\n        hourlyValues: hourlyValues,\n        ...action.payload,\n      },\n    };\n  }\n  return state;\n};\n\nexport default reducer;\n","/Users/Cristina/Desktop/nimbus/client/src/components/getCityFromCoordinates.js",["85"],"import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\n\n \nfunction  GetCityFromCoordinates () {\n    \n    const [city, setCity] = useState({\n      city: \"\"\n    });\n\n    let latitude = 33.93466913794421;\n    let longitude = -84.381074665022;\n    let apiKey = 'AIzaSyDHy8QmVO1C4nSFZhTo9KZZ24Py0IuHrY4'\n    let apiURL = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${apiKey}`;\n    \n    const getCity = async () => {\n        const response = await axios.get(apiURL);\n        const result = response.data\n        console.log(result.results[0].formatted_address)\n            //.results[0].address_components[3].long_name)\n        \n        \n        setCity(result.results[0].address_components[3].long_name);\n    }\n\n    useEffect(() => {\n        getCity()\n    })\n    \n    return(\n        <div>\n            <h1>Test Component</h1>\n            <h2>hi</h2>\n        </div>\n    )\n}\n\n// Sandy Springs Coordinates\n// 33.751649691183076, -84.39383248335515;\n// 33.93466913794421, -84.381074665022\n\n// Glennville\n// 31.940284662191612, -81.92454235966069\n\n//Paris coordinates\n// 48.859677617673164, 2.350486869835329\n\nexport default GetCityFromCoordinates","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeather.js",["86"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport '../styles/currentWeather.css'\n\nfunction CurrentWeather(props) {\n  return (\n    <div className=\"current-weather-div\">\n      {/* <h2>Current Weather Box</h2> */}\n      {props.weather.isWeatherLoaded ? (\n        <>\n          <h1 id=\"city\">{props.weather.city}</h1>\n          <h2>{props.weather.description}</h2>\n          <img\n            src={`http://openweathermap.org/img/wn/${props.weather.icon}@2x.png`}\n          ></img>\n          <p id=\"temp\">{props.weather.temp} &deg;F </p>\n          {/* <p> Feels Like: {props.weather.feels_like} &deg;F </p>\n          <p>💧 {props.weather.humidity} %</p>\n          <p>\n            {\" \"}\n            🌝 {props.weather.sunrise} | 🌚 {props.weather.sunset}\n          </p> */}\n        </>\n      ) : (\n        <p></p>\n      )}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n    return{\n        weather: state.weather\n    }\n}\n\nexport default connect(mapStateToProps)(CurrentWeather);\n","/Users/Cristina/Desktop/nimbus/client/src/components/DailyWeather.js",["87"],"import React from 'react'\nimport { connect } from \"react-redux\";\n\nfunction DailyWeather(props) {\n    return (\n        <div>\n            {/* <h2>Daily Weather Box</h2> */}\n        </div>\n    )\n}\n\nexport default DailyWeather","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeatherDetails.js",[],"/Users/Cristina/Desktop/nimbus/client/src/components/Cloud.js",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":8,"nodeType":"94","messageId":"95","endLine":1,"endColumn":12},{"ruleId":"92","severity":1,"message":"96","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":25},{"ruleId":"92","severity":1,"message":"97","line":1,"column":27,"nodeType":"94","messageId":"95","endLine":1,"endColumn":36},{"ruleId":"92","severity":1,"message":"98","line":3,"column":8,"nodeType":"94","messageId":"95","endLine":3,"endColumn":14},{"ruleId":"92","severity":1,"message":"99","line":4,"column":8,"nodeType":"94","messageId":"95","endLine":4,"endColumn":14},{"ruleId":"92","severity":1,"message":"97","line":1,"column":27,"nodeType":"94","messageId":"95","endLine":1,"endColumn":36},{"ruleId":"92","severity":1,"message":"97","line":1,"column":27,"nodeType":"94","messageId":"95","endLine":1,"endColumn":36},{"ruleId":"92","severity":1,"message":"97","line":1,"column":27,"nodeType":"94","messageId":"95","endLine":1,"endColumn":36},{"ruleId":"92","severity":1,"message":"100","line":6,"column":8,"nodeType":"94","messageId":"95","endLine":6,"endColumn":19},{"ruleId":"92","severity":1,"message":"96","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":25},{"ruleId":"101","severity":1,"message":"102","line":18,"column":8,"nodeType":"103","endLine":18,"endColumn":10,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":10,"column":19,"nodeType":"107","messageId":"108","endLine":10,"endColumn":21},{"ruleId":"92","severity":1,"message":"109","line":8,"column":12,"nodeType":"94","messageId":"95","endLine":8,"endColumn":16},{"ruleId":"110","severity":1,"message":"111","line":13,"column":11,"nodeType":"112","endLine":15,"endColumn":12},{"ruleId":"92","severity":1,"message":"113","line":2,"column":10,"nodeType":"94","messageId":"95","endLine":2,"endColumn":17},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'Navbar' is defined but never used.","'Button' is defined but never used.","'NavDropdown' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getLocation'. Either include it or remove the dependency array.","ArrayExpression",["116"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'city' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'connect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},"Update the dependencies array to be: [getLocation]",{"range":"119","text":"120"},[643,645],"[getLocation]"]