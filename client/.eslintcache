[{"/Users/Cristina/Desktop/nimbus/client/src/index.js":"1","/Users/Cristina/Desktop/nimbus/client/src/App.js":"2","/Users/Cristina/Desktop/nimbus/client/src/reportWebVitals.js":"3","/Users/Cristina/Desktop/nimbus/client/src/components/BaseLayout.js":"4","/Users/Cristina/Desktop/nimbus/client/src/components/Login.js":"5","/Users/Cristina/Desktop/nimbus/client/src/components/Register.js":"6","/Users/Cristina/Desktop/nimbus/client/src/components/Menu.js":"7","/Users/Cristina/Desktop/nimbus/client/src/components/Weather.js":"8","/Users/Cristina/Desktop/nimbus/client/src/components/Favorites.js":"9","/Users/Cristina/Desktop/nimbus/client/src/store/reducer.js":"10","/Users/Cristina/Desktop/nimbus/client/src/components/getCityFromCoordinates.js":"11","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeather.js":"12","/Users/Cristina/Desktop/nimbus/client/src/components/DailyWeather.js":"13"},{"size":1663,"mtime":1607127219121,"results":"14","hashOfConfig":"15"},{"size":634,"mtime":1607027180063,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1606938376446,"results":"17","hashOfConfig":"15"},{"size":360,"mtime":1607454719265,"results":"18","hashOfConfig":"15"},{"size":2145,"mtime":1607042468415,"results":"19","hashOfConfig":"15"},{"size":2513,"mtime":1607034911422,"results":"20","hashOfConfig":"15"},{"size":3812,"mtime":1607475345775,"results":"21","hashOfConfig":"15"},{"size":3121,"mtime":1607476324338,"results":"22","hashOfConfig":"15"},{"size":155,"mtime":1607035394693,"results":"23","hashOfConfig":"15"},{"size":3316,"mtime":1607482086368,"results":"24","hashOfConfig":"15"},{"size":1224,"mtime":1607310371000,"results":"25","hashOfConfig":"15"},{"size":898,"mtime":1607483327783,"results":"26","hashOfConfig":"15"},{"size":214,"mtime":1607474562175,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1uruq8z",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"30"},"/Users/Cristina/Desktop/nimbus/client/src/index.js",[],["63","64"],"/Users/Cristina/Desktop/nimbus/client/src/App.js",["65"],"import logo from './logo.svg';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  //define function to get current location on load\n    function getLocation() {\n     // if statement for when page loads, if user's device supports geolocation, \n     // we will get their coordinates on load\n     console.log(navigator)\n     if (navigator.geolocation) {\n       navigator.geolocation.getCurrentPosition( function (position) {\n         console.log(position)\n       })\n     }\n   }\n   getLocation()\n\n  return (\n    <div className=\"App\">\n      <h1>App Component</h1>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/Cristina/Desktop/nimbus/client/src/reportWebVitals.js",[],"/Users/Cristina/Desktop/nimbus/client/src/components/BaseLayout.js",["66","67","68","69"],"import React, { useState, useEffect } from \"react\";\nimport Menu from \"../components/Menu\"\nimport Navbar from \"react-bootstrap/Navbar\"\nimport Button from \"react-bootstrap/Button\"\n\nfunction BaseLayout(props) {\n  return (\n    <div>\n      <Menu {...props} ></Menu>\n      {props.children}\n      <footer>Footer</footer>\n    </div>\n  );\n}\n\nexport default BaseLayout;\n","/Users/Cristina/Desktop/nimbus/client/src/components/Login.js",["70"],"import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n// import NavLink from 'react-bootstrap/esm/NavLink'\nimport { NavLink } from \"react-router-dom\";\n\nfunction Login(props) {\n  // Login in component will have to hit the server\n  // Because will have to check if the username exists\n  // make a local state to store username and\n  // password from textboxes\n  // Give initial state blank values\n  const [user, setUser] = useState({\n    username: \" \",\n    password: \" \",\n  });\n\n  const handleOnChange = (e) => {\n    setUser({\n      ...user,\n      [e.target.name]: e.target.value,\n    });\n  };\n  //declare function to post to server\n  const userLoggedIn = async () => {\n    const response = await fetch(\"http://localhost:3001/login/user\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(user),\n    });\n    const result = response.json();\n    console.log(result);\n    return result;\n  };\n\n  //declare function that will call userLoggedIn function\n  //When button clicked\n  //if credentials exist, redirect them to weather page\n  const handleLogin = async () => {\n    let user = await userLoggedIn();\n    if (user) {\n      props.history.push(\"/weather\");\n    }\n  };\n  return (\n    <div className=\"login-div\">\n      <h2>Login</h2>\n      <Form>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>Username</Form.Label>\n          <Form.Control\n            type=\"username\"\n            placeholder=\"Enter username\"\n            onChange={handleOnChange}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Password\"\n            onChange={handleOnChange}\n          />\n        </Form.Group>\n\n        <Button variant=\"primary\" onClick={handleLogin}>\n          Login\n        </Button>\n      </Form>\n      <p>\n        Need an account? <NavLink to=\"/register\">Sign Up</NavLink>\n      </p>\n    </div>\n  );\n}\n\nexport default Login;\n","/Users/Cristina/Desktop/nimbus/client/src/components/Register.js",["71"],"import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction Register(props) {\n  // register component will have to hit the server\n  // create a local state to store the username\n  // and password\n  const [user, setUser] = useState({\n    username: \" \",\n    password: \" \",\n  });\n\n  // make handleonChange function so\n  const handleonChange = (e) => {\n    setUser({\n      ...user,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  // function to create user in db\n  // passing in username and passwords as args\n  // come from the state\n  // createUser function will then be called in\n  // the handleSave function\n  //  const createUser = () => {\n  //     return fetch('http://localhost:3001/register/user', {\n  //         method: 'POST',\n  //         headers: {\n  //             'Content-Type': 'application/json'\n  //         },\n  //         body: JSON.stringify(user)\n  //     }).then(response => response.json()).then(result => {\n  //         console.log(result)\n  //         return(result)\n  //     })\n  //  }\n\n  const createUser = async () => {\n    const response = await fetch(\"http://localhost:3001/register/user\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(user),\n    });\n\n    const result = response.json();\n    console.log(result);\n    return result;\n  };\n\n  const handleSave = async () => {\n    let savedUser = await createUser();\n    if (savedUser) {\n      props.history.push(\"/weather\");\n    }\n  };\n\n  return (\n    <div className=\"register-div\">\n      <h2>Register</h2>\n      <Form>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter username\"\n            name=\"username\"\n            onChange={handleonChange}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            onChange={handleonChange}\n          />\n        </Form.Group>\n        <Button variant=\"primary\" onClick={handleSave}>\n          Register\n        </Button>\n      </Form>\n      <p>\n        Already have an account? <NavLink to=\"/\">Sign in</NavLink>\n      </p>\n    </div>\n  );\n}\n\nexport default Register;\n","/Users/Cristina/Desktop/nimbus/client/src/components/Menu.js",["72","73"],"import React, { useState, useEffect } from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Button from \"react-bootstrap/Button\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Form from \"react-bootstrap/Form\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport { NavLink } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\n\nfunction Menu(props) {\n  // need a local state to store the city user entered in textbox\n  // Give a blank initial value for the state\n  const [city, setCity] = useState(\"miami\");\n\n  // function that saves what the user types in\n  const handleChange = (e) => {\n    setCity(e.target.value);\n    \n  };\n\n  console.log(props)\n\n  // use city in local state to get lat and lng with google maps API\n  const getLatandLongByAddress = async () => {\n    let formattedAddress = city.split(\" \").join(\"+\");\n    let url = `https://maps.googleapis.com/maps/api/geocode/json?address=${formattedAddress}&result_type=locality&key=AIzaSyDHy8QmVO1C4nSFZhTo9KZZ24Py0IuHrY4`;\n\n    let response = await axios.get(url);\n    let result = response.data\n    let coordsObject = result.results[0].geometry.location;\n    //console.log(coordsObject.lat)\n    //console.log(coordsObject.lng)\n    return coordsObject\n    \n  }\n\n  // function to get weather from lat and long obtained from\n  // getLatandLongByAddress function above\n  // Will take in a lat and lng\n  const getWeatherBySearch =  async (lat, lng) => {\n     const apiKey = `00b0dda3295804976daaf4ca564bdf04`;\n       let apiURL = `https://api.openweathermap.org/data/2.5/onecall`;\n        const response = await axios.get(apiURL, {\n          params: {\n            lat: lat,\n            lon: lng,\n            exclude: \"minutely\",\n            appid: apiKey,\n            units: \"imperial\",\n          },\n        });\n        const result = response.data\n        console.log(result)\n        props.onFetchWeather({ ...result, city })\n        return result\n  }\n\n\n  const handleSearch = async () => {\n    const locationObject =  await getLatandLongByAddress();\n    console.log(locationObject)\n    const weather = await getWeatherBySearch(locationObject.lat, locationObject.lng)\n    console.log(weather)\n  }\n\n\n  return (\n    <div className=\"navbar-div\">\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"/weather\">Nimbus</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            {/* <Nav.Link href=\"#home\">Home</Nav.Link> */}\n            <NavLink to=\"/user/favorites\">Favorites</NavLink>\n            <Nav.Link href=\"#link\">Hourly Forecast</Nav.Link>\n            <Nav.Link href=\"#link\">7 Day Forecast</Nav.Link>\n          </Nav>\n          <Form inline>\n            <FormControl\n              type=\"text\"\n              placeholder=\"Enter City\"\n              name=\"city\"\n              className=\"mr-sm-2\"\n              onChange={handleChange}\n            />\n            <Button variant=\"outline-primary\" onClick={handleSearch}>Search</Button>\n          </Form>\n        </Navbar.Collapse>\n      </Navbar>\n      \n      {/* <h1>{city}</h1> */}\n    </div>\n  );\n}\n\n// Will need mapStateToProps because trying\n// want to display parts of the global state\nconst mapStateToProps = (state) => {\n    return {\n        weather: state.weather\n    }\n}\n\n// will no longer need the local state because\n// moving fetched API to redux global state\n// will need DispatchToProps because trying \n// to update global state\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onFetchWeather: (weather) => dispatch({type: 'ON_FETCHED_WEATHER', payload: weather})\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu);\n","/Users/Cristina/Desktop/nimbus/client/src/components/Weather.js",["74","75"],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport CurrentWeather from './CurrentWeather'\nimport DailyWeather from './DailyWeather'\n\nfunction Weather(props) {\n    // make a local state to store weather object in\n    // const [weather, setWeather] = useState({\n    //     weather: {}\n    // })\n    // Will need to get current location coordinates\n    // Will need to get coordinates based on a search\n    // want to get the coordinates when the component mounts\n    useEffect(() => {\n        getLocation()\n    }, [])\n\n    function getLocation() {\n       if (navigator.geolocation) {\n           navigator.geolocation.getCurrentPosition(showCurrentPosition)\n       } \n   }\n\n    const showCurrentPosition = async (position) => {\n        console.log(position)\n       let latitude = position.coords.latitude;\n       let longitude = position.coords.longitude;\n       console.log(latitude)\n       console.log(longitude)\n       let apiKey = `00b0dda3295804976daaf4ca564bdf04`;\n       let apiURL = `https://api.openweathermap.org/data/2.5/onecall`;\n        let response = await axios.get(apiURL, {\n          params: {\n            lat: latitude,\n            lon: longitude,\n            exclude: \"minutely\",\n            appid: apiKey,\n            units: \"imperial\",\n          },\n        });\n        const result = response.data\n        console.log(result)\n        \n        apiKey = \"AIzaSyDHy8QmVO1C4nSFZhTo9KZZ24Py0IuHrY4\";\n        apiURL = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${apiKey}`;\n        response = await axios.get(apiURL);\n        const cityData = response.data;\n        let city = cityData.results[0].formatted_address.split(',')[0];\n        props.onFetchWeather({...result, city})\n   }\n    \n   //setting up a weather object\n   const currentWeatherValues = {\n     //date: new Date(props.weather.current.dt * 1000),\n    //  temp: Math.round(props.weather.current.temp),\n    //  feelsLike: Math.round(props.weather.current.feels_like),\n     //\n   };\n\n   console.log(currentWeatherValues.feelsLike)\n\n    return (\n      <div>\n        <h1>Weather Component</h1>\n        {/* <h3>{props.weather.lat}</h3>\n        {props.weather.isWeatherLoaded ? (\n          <>\n            <h3>{props.weather.city}</h3>\n            <p>{props.weather.current.temp}</p>\n          </>\n        ) : (\n          <p>\"Loading...\"</p>\n        )} */}\n        <CurrentWeather></CurrentWeather>\n        <DailyWeather />\n      </div>\n    );\n\n\n}\n\n// Will need mapStateToProps because trying\n// want to display parts of the global state\nconst mapStateToProps = (state) => {\n    return {\n        weather: state.weather\n    }\n}\n\n// will no longer need the local state because\n// moving fetched API to redux global state\n// will need DispatchToProps because trying \n// to update global state\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onFetchWeather: (weather) => dispatch({type: 'ON_FETCHED_WEATHER', payload: weather})\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Weather)","/Users/Cristina/Desktop/nimbus/client/src/components/Favorites.js",[],"/Users/Cristina/Desktop/nimbus/client/src/store/reducer.js",["76"],"/Users/Cristina/Desktop/nimbus/client/src/components/getCityFromCoordinates.js",["77"],"import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\n\n \nfunction  GetCityFromCoordinates () {\n    \n    const [city, setCity] = useState({\n      city: \"\"\n    });\n\n    let latitude = 33.93466913794421;\n    let longitude = -84.381074665022;\n    let apiKey = 'AIzaSyDHy8QmVO1C4nSFZhTo9KZZ24Py0IuHrY4'\n    let apiURL = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${apiKey}`;\n    \n    const getCity = async () => {\n        const response = await axios.get(apiURL);\n        const result = response.data\n        console.log(result.results[0].formatted_address)\n            //.results[0].address_components[3].long_name)\n        \n        \n        setCity(result.results[0].address_components[3].long_name);\n    }\n\n    useEffect(() => {\n        getCity()\n    })\n    \n    return(\n        <div>\n            <h1>Test Component</h1>\n            <h2>hi</h2>\n        </div>\n    )\n}\n\n// Sandy Springs Coordinates\n// 33.751649691183076, -84.39383248335515;\n// 33.93466913794421, -84.381074665022\n\n// Glennville\n// 31.940284662191612, -81.92454235966069\n\n//Paris coordinates\n// 48.859677617673164, 2.350486869835329\n\nexport default GetCityFromCoordinates","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeather.js",["78"],"/Users/Cristina/Desktop/nimbus/client/src/components/DailyWeather.js",["79"],"import React from 'react'\nimport { connect } from \"react-redux\";\n\nfunction DailyWeather(props) {\n    return (\n        <div>\n            <h2>Daily Weather Box</h2>\n        </div>\n    )\n}\n\nexport default DailyWeather",{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":1,"column":8,"nodeType":"86","messageId":"87","endLine":1,"endColumn":12},{"ruleId":"84","severity":1,"message":"88","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":25},{"ruleId":"84","severity":1,"message":"89","line":1,"column":27,"nodeType":"86","messageId":"87","endLine":1,"endColumn":36},{"ruleId":"84","severity":1,"message":"90","line":3,"column":8,"nodeType":"86","messageId":"87","endLine":3,"endColumn":14},{"ruleId":"84","severity":1,"message":"91","line":4,"column":8,"nodeType":"86","messageId":"87","endLine":4,"endColumn":14},{"ruleId":"84","severity":1,"message":"89","line":1,"column":27,"nodeType":"86","messageId":"87","endLine":1,"endColumn":36},{"ruleId":"84","severity":1,"message":"89","line":1,"column":27,"nodeType":"86","messageId":"87","endLine":1,"endColumn":36},{"ruleId":"84","severity":1,"message":"89","line":1,"column":27,"nodeType":"86","messageId":"87","endLine":1,"endColumn":36},{"ruleId":"84","severity":1,"message":"92","line":6,"column":8,"nodeType":"86","messageId":"87","endLine":6,"endColumn":19},{"ruleId":"84","severity":1,"message":"88","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":17,"column":8,"nodeType":"95","endLine":17,"endColumn":10,"suggestions":"96"},{"ruleId":"97","severity":1,"message":"98","line":10,"column":19,"nodeType":"99","messageId":"100","endLine":10,"endColumn":21},{"ruleId":"84","severity":1,"message":"101","line":8,"column":12,"nodeType":"86","messageId":"87","endLine":8,"endColumn":16},{"ruleId":"102","severity":1,"message":"103","line":12,"column":11,"nodeType":"104","endLine":12,"endColumn":86},{"ruleId":"84","severity":1,"message":"105","line":2,"column":10,"nodeType":"86","messageId":"87","endLine":2,"endColumn":17},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'Navbar' is defined but never used.","'Button' is defined but never used.","'NavDropdown' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getLocation'. Either include it or remove the dependency array.","ArrayExpression",["108"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'city' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'connect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},"Update the dependencies array to be: [getLocation]",{"range":"111","text":"112"},[583,585],"[getLocation]"]