[{"/Users/Cristina/Desktop/nimbus/client/src/index.js":"1","/Users/Cristina/Desktop/nimbus/client/src/App.js":"2","/Users/Cristina/Desktop/nimbus/client/src/reportWebVitals.js":"3","/Users/Cristina/Desktop/nimbus/client/src/components/BaseLayout.js":"4","/Users/Cristina/Desktop/nimbus/client/src/components/Login.js":"5","/Users/Cristina/Desktop/nimbus/client/src/components/Register.js":"6","/Users/Cristina/Desktop/nimbus/client/src/components/Menu.js":"7","/Users/Cristina/Desktop/nimbus/client/src/components/Weather.js":"8","/Users/Cristina/Desktop/nimbus/client/src/components/Favorites.js":"9","/Users/Cristina/Desktop/nimbus/client/src/store/reducer.js":"10","/Users/Cristina/Desktop/nimbus/client/src/components/getCityFromCoordinates.js":"11","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeather.js":"12","/Users/Cristina/Desktop/nimbus/client/src/components/DailyWeather.js":"13","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeatherDetails.js":"14","/Users/Cristina/Desktop/nimbus/client/src/components/Cloud.js":"15","/Users/Cristina/Desktop/nimbus/client/src/components/Footer.js":"16","/Users/Cristina/Desktop/nimbus/client/src/components/HourlyWeather.js":"17","/Users/Cristina/Desktop/nimbus/client/src/components/languages/languages.js":"18","/Users/Cristina/Desktop/nimbus/client/src/services/useWindowDimensions.js":"19"},{"size":1673,"mtime":1608046496898,"results":"20","hashOfConfig":"21"},{"size":634,"mtime":1607027180063,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1606938376446,"results":"23","hashOfConfig":"21"},{"size":395,"mtime":1608070095071,"results":"24","hashOfConfig":"21"},{"size":3238,"mtime":1607721982764,"results":"25","hashOfConfig":"21"},{"size":3697,"mtime":1607567772554,"results":"26","hashOfConfig":"21"},{"size":9223,"mtime":1608078777483,"results":"27","hashOfConfig":"21"},{"size":3975,"mtime":1608071165368,"results":"28","hashOfConfig":"21"},{"size":1810,"mtime":1608058400811,"results":"29","hashOfConfig":"21"},{"size":5273,"mtime":1608073261454,"results":"30","hashOfConfig":"21"},{"size":1224,"mtime":1607310371000,"results":"31","hashOfConfig":"21"},{"size":1393,"mtime":1607996218119,"results":"32","hashOfConfig":"21"},{"size":2240,"mtime":1608073959533,"results":"33","hashOfConfig":"21"},{"size":2266,"mtime":1608048695608,"results":"34","hashOfConfig":"21"},{"size":1657,"mtime":1607554649501,"results":"35","hashOfConfig":"21"},{"size":240,"mtime":1608067375804,"results":"36","hashOfConfig":"21"},{"size":996,"mtime":1608076820758,"results":"37","hashOfConfig":"21"},{"size":4095,"mtime":1608080020815,"results":"38","hashOfConfig":"21"},{"size":591,"mtime":1608003279217,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"lrt7y4",{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"43"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"43"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"43"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"43"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"43"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"43"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"43"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"43"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"/Users/Cristina/Desktop/nimbus/client/src/index.js",["92","93","94","95","96"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport BaseLayout from \"./components/BaseLayout\";\nimport Login from \"./components/Login\";\nimport Register from \"./components/Register\";\nimport Weather from \"./components/Weather\";\nimport Favorites from \"./components/Favorites\";\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport reducer from \"./store/reducer\"\nimport getCityFromCoordinates from \"./components/getCityFromCoordinates\";\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <BaseLayout>\n          <Switch>\n            {/* <Route component={App} path=\"/app\" exact></Route>\n            <Route component={Login} path=\"/\" exact></Route>\n            <Route component={Register} path=\"/register\"></Route> */}\n            <Route component={Weather} path=\"/\" exact></Route>\n            {/* <Route component={Favorites} path=\"/favorites\"></Route>\n            <Route component={getCityFromCoordinates} path=\"/test\"></Route> */}\n          </Switch>\n        </BaseLayout>\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["97","98"],"/Users/Cristina/Desktop/nimbus/client/src/App.js",["99"],"import logo from './logo.svg';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  //define function to get current location on load\n    function getLocation() {\n     // if statement for when page loads, if user's device supports geolocation, \n     // we will get their coordinates on load\n     console.log(navigator)\n     if (navigator.geolocation) {\n       navigator.geolocation.getCurrentPosition( function (position) {\n         console.log(position)\n       })\n     }\n   }\n   getLocation()\n\n  return (\n    <div className=\"App\">\n      <h1>App Component</h1>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/Cristina/Desktop/nimbus/client/src/reportWebVitals.js",[],"/Users/Cristina/Desktop/nimbus/client/src/components/BaseLayout.js",["100","101","102","103"],"import React, { useState, useEffect } from \"react\";\nimport Menu from \"../components/Menu\"\nimport Navbar from \"react-bootstrap/Navbar\"\nimport Button from \"react-bootstrap/Button\"\nimport Footer from \"./Footer\";\n\nfunction BaseLayout(props) {\n  return (\n    <div>\n      <header><Menu {...props} ></Menu></header>\n      {props.children}\n      <Footer />\n    </div>\n  );\n}\n\nexport default BaseLayout;\n","/Users/Cristina/Desktop/nimbus/client/src/components/Login.js",["104"],"import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n// import NavLink from 'react-bootstrap/esm/NavLink'\nimport { NavLink } from \"react-router-dom\";\nimport axios from \"axios\"\n\nimport \"../styles/login.css\"\nimport Cloud from \"./Cloud\";\n\nfunction Login(props) {\n  // Login in component will have to hit the server\n  // Because will have to check if the username exists\n  // make a local state to store username and\n  // password from textboxes\n  // Give initial state blank values\n  const [user, setUser] = useState({});\n\n  const handleOnChange = (e) => {\n    setUser({\n      ...user,\n      [e.target.name]: e.target.value,\n    });\n  };\n  //declare function to post to server\n  const userLoggedIn = async () => {\n    \n    //making same fetch call but with axios\n    const response = await axios.post('http://localhost:3001/login/user', {\n      username: user.username,\n      password: user.password\n    })\n    const result = response.data\n    return result\n    \n    // const response = await fetch(\"http://localhost:3001/login/user\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Content-Type\": \"application/json\",\n    //   },\n    //   body: JSON.stringify(user),\n    // });\n    // const result = response.json();\n    // console.log(result);\n    // return result;\n  };\n\n  //declare function that will call userLoggedIn function\n  //When button clicked\n  //if credentials exist, redirect them to weather page\n  const handleLogin = async () => {\n    \n    let userToken = await userLoggedIn();\n    //const response = await axios.post(\"http://localhost:3001/login/user\", {\n    //   username: user.username,\n    //   password: user.password,\n    // });\n    // const result = response.data;\n    // console.log(result);\n    //console.log(user)\n    if (user) {\n      const token = userToken.token\n      localStorage.setItem('jsonwebtoken', token)\n       \n      props.history.push(\"/weather\");\n    }\n    \n    // let user = await userLoggedIn();\n    // if (user) {\n    //   props.history.push(\"/weather\");\n    // }\n  };\n  return (\n    <div className=\"login-div\">\n      <div className=\"title-logo\">\n        <Cloud />\n        <h3>Nimbus</h3>\n      </div>\n\n      <Form>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label></Form.Label>\n          <Form.Control\n            class=\"input-sizing\"\n            type=\"username\"\n            name= 'username'\n            placeholder=\"Enter email\"\n            onChange={handleOnChange}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Label></Form.Label>\n          <Form.Control\n            class=\"input-sizing\"\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Password\"\n            onChange={handleOnChange}\n          />\n        </Form.Group>\n\n        <Button size=\"lg\" className=\"button-color\" variant=\"light\" onClick={handleLogin}>\n          <div className=\"button-text\">Login</div>\n        </Button>\n      </Form>\n\n      <p>\n        Need an account?{\" \"}\n        <NavLink to=\"/register\">\n          <span className=\"link\">Sign Up</span>\n        </NavLink>\n      </p>\n    </div>\n  );\n}\n\nexport default Login;\n","/Users/Cristina/Desktop/nimbus/client/src/components/Register.js",["105"],"import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { NavLink } from \"react-router-dom\";\nimport \"../styles/register.css\"\nimport Cloud from \"./Cloud\";\n\nfunction Register(props) {\n  // register component will have to hit the server\n  // create a local state to store the username\n  // and password\n  const [user, setUser] = useState({\n    username: \" \",\n    password: \" \",\n  });\n\n  // make handleonChange function so\n  const handleOnChange = (e) => {\n    setUser({\n      ...user,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  // function to create user in db\n  // passing in username and passwords as args\n  // come from the state\n  // createUser function will then be called in\n  // the handleSave function\n  //  const createUser = () => {\n  //     return fetch('http://localhost:3001/register/user', {\n  //         method: 'POST',\n  //         headers: {\n  //             'Content-Type': 'application/json'\n  //         },\n  //         body: JSON.stringify(user)\n  //     }).then(response => response.json()).then(result => {\n  //         console.log(result)\n  //         return(result)\n  //     })\n  //  }\n\n  const createUser = async () => {\n    const response = await fetch(\"http://localhost:3001/register/user\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(user),\n    });\n\n    const result = response.json();\n    console.log(result);\n    return result;\n  };\n\n  const handleSave = async () => {\n    let savedUser = await createUser();\n    if (savedUser) {\n      props.history.push(\"/weather\");\n    }\n  };\n\n  return (\n    <div className=\"register-div\">\n      <div className=\"title-logo\">\n        <Cloud />\n        <h3>Nimbus</h3>\n      </div>\n\n      <Form>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label></Form.Label>\n          <Form.Control\n            class=\"input-sizing\"\n            type=\"username\"\n            placeholder=\"Enter email\"\n            onChange={handleOnChange}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Label></Form.Label>\n          <Form.Control\n            class=\"input-sizing\"\n            type=\"password\"\n            placeholder=\"Password\"\n            onChange={handleOnChange}\n          />\n        </Form.Group>\n\n        <Button size=\"lg\"className=\"button-color\" variant=\"light\" onClick={handleSave}>\n          <div className=\"button-text\">Login</div>\n        </Button>\n      </Form>\n\n      <p>\n        Already have an account?{\" \"}\n        <NavLink to=\"/\">\n          <span className=\"link\">Sign In</span>\n        </NavLink>\n      </p>\n    </div>\n\n    // <div className=\"register-div\">\n    //   <h2>Register</h2>\n    //   <Form>\n    //     <Form.Group controlId=\"formBasicEmail\">\n    //       <Form.Label>Username</Form.Label>\n    //       <Form.Control\n    //         type=\"text\"\n    //         placeholder=\"Enter username\"\n    //         name=\"username\"\n    //         onChange={handleonChange}\n    //       />\n    //     </Form.Group>\n\n    //     <Form.Group controlId=\"formBasicPassword\">\n    //       <Form.Label>Password</Form.Label>\n    //       <Form.Control\n    //         type=\"password\"\n    //         placeholder=\"Password\"\n    //         name=\"password\"\n    //         onChange={handleonChange}\n    //       />\n    //     </Form.Group>\n    //     <Button variant=\"primary\" onClick={handleSave}>\n    //       Register\n    //     </Button>\n    //   </Form>\n    //   <p>\n    //     Already have an account? <NavLink to=\"/\">Sign in</NavLink>\n    //   </p>\n    // </div>\n  );\n}\n\nexport default Register;\n","/Users/Cristina/Desktop/nimbus/client/src/components/Menu.js",["106","107"],"import React, { useState, useEffect } from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Button from \"react-bootstrap/Button\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Form from \"react-bootstrap/Form\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport { NavLink } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport \"../styles/menu.css\";\nimport Cloud from \"./Cloud\";\n\nfunction Menu(props) {\n  // need a local state to store the city user entered in textbox\n  // Give a blank initial value for the state\n  const [city, setCity] = useState(\"miami\");\n\n  //const [language, setLanguage] = useState(\"\");\n\n  // function that saves what the user types in\n  const handleChange = (e) => {\n    setCity(e.target.value);\n  };\n\n  console.log(props);\n\n  // use city in local state to get lat and lng with google maps API\n  const getLatandLongByAddress = async () => {\n    let formattedAddress = city.split(\" \").join(\"+\");\n    let url = `https://maps.googleapis.com/maps/api/geocode/json?address=${formattedAddress}&result_type=locality&key=AIzaSyDHy8QmVO1C4nSFZhTo9KZZ24Py0IuHrY4`;\n\n    let response = await axios.get(url);\n    let result = response.data;\n    let coordsObject = result.results[0].geometry.location;\n    //console.log(coordsObject.lat)\n    //console.log(coordsObject.lng)\n    return coordsObject;\n  };\n\n  // function to get weather from lat and long obtained from\n  // getLatandLongByAddress function above\n  // Will take in a lat and lng\n  const getWeatherBySearch = async (lat, lng) => {\n    const apiKey = `00b0dda3295804976daaf4ca564bdf04`;\n    let apiURL = `https://api.openweathermap.org/data/2.5/onecall`;\n    const response = await axios.get(apiURL, {\n      params: {\n        lat: lat,\n        lon: lng,\n        exclude: \"minutely\",\n        appid: apiKey,\n        units: \"imperial\",\n        lang: props.apiLanguage,\n      },\n    });\n    const result = response.data;\n    console.log(result);\n    props.onFetchWeather({ ...result, city });\n    return result;\n  };\n\n  const handleSearch = async () => {\n    const locationObject = await getLatandLongByAddress();\n    console.log(locationObject);\n    const weather = await getWeatherBySearch(\n      locationObject.lat,\n      locationObject.lng\n    );\n    console.log(weather);\n  };\n\n  return (\n    <div className=\"navbar-div\">\n      <Navbar className=\"color-nav\" expand=\"lg\">\n        <Navbar.Brand href=\"/weather\">\n          <div className=\"main-title\">\n            <Cloud />\n            <span>Nimbus</span>\n          </div>\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            {/* <Nav.Link href=\"#home\">Home</Nav.Link> */}\n            {/* <NavLink to=\"/favorites\">\n              <div className=\"title\">{props.strings.favorites}</div>\n            </NavLink> */}\n            {/* <Nav.Link href=\"#link\">\n              <div className=\"title\">{props.strings.hourly_forecast}</div>\n            </Nav.Link> */}\n            {/* <Nav.Link href=\"#link\">\n              <div className=\"title\">{props.strings.daily_forecast}</div>\n            </Nav.Link> */}\n            {/* <Nav.Link href=\"#link\">\n              <div className=\"title\">{props.strings.logout}</div>\n            </Nav.Link> */}\n            <NavDropdown\n              title={\n                <span className=\"languages-dropdown\">\n                  {props.strings.languages}\n                </span>\n              }\n              id=\"basic-nav-dropdown\"\n              className=\"title\"\n              onSelect={async (language) => {\n                await props.onLanguageSelected(language);\n\n                let latitude = props.weather.lat;\n                let longitude = props.weather.lon;\n                let apiKey = `00b0dda3295804976daaf4ca564bdf04`;\n                let apiURL = `https://api.openweathermap.org/data/2.5/onecall`;\n\n                let response = await axios.get(apiURL, {\n                  params: {\n                    lat: latitude,\n                    lon: longitude,\n                    exclude: \"minutely\",\n                    appid: apiKey,\n                    units: props.tempUnit,\n                    lang: language,\n                  },\n                });\n                const result = response.data;\n                console.log(result);\n                console.log(props.apiLanguage);\n\n                apiKey = \"AIzaSyDHy8QmVO1C4nSFZhTo9KZZ24Py0IuHrY4\";\n                apiURL = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${apiKey}`;\n                response = await axios.get(apiURL);\n                const cityData = response.data;\n                let city = cityData.results[0].formatted_address.split(\",\")[0];\n                props.onFetchWeather({ ...result, city });\n              }}\n            >\n              <NavDropdown.Item eventKey=\"en\">\n                {props.strings.english}\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item eventKey=\"es\">\n                {props.strings.spanish}\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item eventKey=\"fr\">\n                {props.strings.french}\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item eventKey=\"vi\">\n                {props.strings.vietnamese}\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item eventKey=\"zh_cn\">\n                {props.strings.chinese}\n              </NavDropdown.Item>\n            </NavDropdown>\n\n            <NavDropdown\n              title={\n                <span className=\"languages-dropdown\">\n                  {props.strings.units}\n                </span>\n              }\n              id=\"basic-nav-dropdown\"\n              className=\"title\"\n              onSelect={async (unit) => {\n                await props.onUnitsSelected(unit);\n\n                let latitude = props.weather.lat;\n                let longitude = props.weather.lon;\n                let apiKey = `00b0dda3295804976daaf4ca564bdf04`;\n                let apiURL = `https://api.openweathermap.org/data/2.5/onecall`;\n\n                let response = await axios.get(apiURL, {\n                  params: {\n                    lat: latitude,\n                    lon: longitude,\n                    exclude: \"minutely\",\n                    appid: apiKey,\n                    units: unit,\n                    lang: props.apiLanguage,\n                  },\n                });\n                const result = response.data;\n                console.log(result);\n                console.log(props.apiLanguage);\n\n                apiKey = \"AIzaSyDHy8QmVO1C4nSFZhTo9KZZ24Py0IuHrY4\";\n                apiURL = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${apiKey}`;\n                response = await axios.get(apiURL);\n                const cityData = response.data;\n                let city = cityData.results[0].formatted_address.split(\",\")[0];\n                props.onFetchWeather({ ...result, city });\n              }}\n            >\n              <NavDropdown.Item href=\"#action/3.1\" eventKey=\"imperial\">\n                {props.strings.fahrenheit}\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.2\" eventKey=\"metric\">\n                {props.strings.celsius}\n              </NavDropdown.Item>\n            </NavDropdown>\n\n            {/* <Nav.Link href=\"#link\">\n              <div className=\"title\">{props.strings.logout}</div>\n            </Nav.Link> */}\n          </Nav>\n          <Form inline>\n            <FormControl\n              type=\"text\"\n              placeholder={props.strings.enter_city}\n              name=\"city\"\n              className=\"mr-sm-2\"\n              onChange={handleChange}\n            />\n            <Button variant=\"outline-info\" size=\"sm\" onClick={handleSearch}>\n              <div className=\"title\">{props.strings.search}</div>\n            </Button>\n          </Form>\n        </Navbar.Collapse>\n      </Navbar>\n\n      {/* <h1>{city}</h1> */}\n    </div>\n  );\n}\n\n// Will need mapStateToProps because trying\n// want to display parts of the global state\nconst mapStateToProps = (state) => {\n  return {\n    weather: state.weather,\n    strings: state.strings,\n    apiLanguage: state.apiLanguage,\n    tempUnit: state.tempUnit,\n    tempUnitSymbol: state.tempUnitSymbol\n  };\n};\n\n// will no longer need the local state because\n// moving fetched API to redux global state\n// will need DispatchToProps because trying\n// to update global state\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onFetchWeather: (weather) =>\n      dispatch({ type: \"ON_FETCHED_WEATHER\", payload: weather }),\n    onLanguageSelected: (language) =>\n      dispatch({ type: \"ON_LANGUAGE\", payload: language }),\n    onUnitsSelected: (units) => dispatch({ type: \"ON_UNITS\", payload: units }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu);\n","/Users/Cristina/Desktop/nimbus/client/src/components/Weather.js",["108","109"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport CurrentWeather from \"./CurrentWeather\";\nimport DailyWeather from \"./DailyWeather\";\nimport CurrentWeatherDetails from \"./CurrentWeatherDetails\";\nimport HourlyWeather from \"./HourlyWeather\";\nimport useWindowDimensions from \"../services/useWindowDimensions\";\nimport \"../styles/weather.css\"\nimport Spinner from \"react-bootstrap/Spinner\"\n\nfunction Weather(props) {\n  // make a local state to store weather object in\n  // const [weather, setWeather] = useState({\n  //     weather: {}\n  // })\n  // Will need to get current location coordinates\n  // Will need to get coordinates based on a search\n  // want to get the coordinates when the component mounts\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  const { height, width } = useWindowDimensions();\n\n  function getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showCurrentPosition);\n    }\n  }\n\n  const showCurrentPosition = async (position) => {\n    console.log(position);\n    let latitude = position.coords.latitude;\n    let longitude = position.coords.longitude;\n    console.log(latitude);\n    console.log(longitude);\n    let apiKey = `00b0dda3295804976daaf4ca564bdf04`;\n    let apiURL = `https://api.openweathermap.org/data/2.5/onecall`;\n    let response = await axios.get(apiURL, {\n      params: {\n        lat: latitude,\n        lon: longitude,\n        exclude: \"minutely\",\n        appid: apiKey,\n        units: props.tempUnit,\n        lang: props.apiLanguage,\n      },\n    });\n    const result = response.data;\n    console.log(result);\n    console.log(props.apiLanguage);\n\n    apiKey = \"AIzaSyDHy8QmVO1C4nSFZhTo9KZZ24Py0IuHrY4\";\n    apiURL = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${apiKey}`;\n    response = await axios.get(apiURL);\n    const cityData = response.data;\n    let city = cityData.results[0].formatted_address.split(\",\")[0];\n    props.onFetchWeather({ ...result, city });\n  };\n\n  //setting up a weather object\n  const currentWeatherValues = {\n    //date: new Date(props.weather.current.dt * 1000),\n    //  temp: Math.round(props.weather.current.temp),\n    //  feelsLike: Math.round(props.weather.current.feels_like),\n    //\n  };\n\n  console.log(currentWeatherValues.feelsLike);\n  console.log(height, width, \"DIMENSIONS\");\n\n  if (!props.weather.isWeatherLoaded) {\n    return <div className=\"loadingSpinner\" ><Spinner animation=\"border\" variant=\"info\" /></div>;\n  }\n  return (\n    <div className=\"main-content\">\n      {/* <h1>Weather Component</h1> */}\n      {/* <h3>{props.weather.lat}</h3>\n        {props.weather.isWeatherLoaded ? (\n          <>\n            <h3>{props.weather.city}</h3>\n            <p>{props.weather.current.temp}</p>\n          </>\n        ) : (\n          <p>\"Loading...\"</p>\n        )} */}\n      {width >= 1025 ? (\n        <>\n          <div className=\"desktop-current-weather\">\n            <CurrentWeather  />\n            <CurrentWeatherDetails  />\n          </div>\n\n          <HourlyWeather />\n          <DailyWeather />\n        </>\n      ) : (\n        <>\n          <CurrentWeather />\n          <HourlyWeather />\n          <DailyWeather />\n          <CurrentWeatherDetails />\n        </>\n      )}\n    </div>\n  );\n}\n\n// Will need mapStateToProps because trying\n// want to display parts of the global state\nconst mapStateToProps = (state) => {\n  return {\n    weather: state.weather,\n    apiLanguage: state.apiLanguage,\n    tempUnit: state.tempUnit,\n  };\n};\n\n// will no longer need the local state because\n// moving fetched API to redux global state\n// will need DispatchToProps because trying\n// to update global state\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onFetchWeather: (weather) =>\n      dispatch({ type: \"ON_FETCHED_WEATHER\", payload: weather }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Weather);\n","/Users/Cristina/Desktop/nimbus/client/src/components/Favorites.js",[],"/Users/Cristina/Desktop/nimbus/client/src/store/reducer.js",["110","111","112","113","114","115","116","117","118","119"],"import { English, Spanish, French, Vietnamese, Chinese } from \"../components/languages/languages\";\n\nconst initialState = {\n  weather: {\n    isWeatherLoaded: false,\n    dailyValues: [],\n    hourlyValues: [],\n  },\n  favorites: {},\n  strings: English,\n  DateTimeLanguage: \"en-us\",\n  apiLanguage: \"en\",\n  tempUnitSymbol: \"F\",\n  tempUnit: 'imperial',\n  windSpeedUnits: 'mph'\n};\n\n// props.strings.feels_like\n\nconst dayjs = require(\"dayjs\");\n\nconst reducer = (state = initialState, action) => {\n  if (action.type == \"ON_FETCHED_WEATHER\") {\n    const utcDate = new Date(action.payload.current.dt * 1000);\n    const localDate = new Date(utcDate.toLocaleString());\n    const dayOfWeek = new Intl.DateTimeFormat(state.DateTimeLanguage, {\n      weekday: \"long\",\n    }).format(localDate);\n    const feels_like = Math.round(action.payload.current.feels_like);\n    const humidity = action.payload.current.humidity;\n    const temp = Math.round(action.payload.current.temp);\n    const mainDescription = action.payload.current.weather[0].main;\n    const description = action.payload.current.weather[0].description;\n    const icon = action.payload.current.weather[0].icon;\n    const wind_speed = action.payload.current.wind_speed;\n    const clouds = action.payload.current.clouds;\n    const uvi = action.payload.current.uvi;\n\n    const utcDateSunrise = new Date(action.payload.current.sunrise * 1000);\n    const localDateSunrise = new Date(utcDateSunrise.toLocaleString());\n    const sunrise = dayjs(localDateSunrise).format(\"h:mm A\");\n\n    const utcDateSunset = new Date(action.payload.current.sunset * 1000);\n    const localDateSunset = new Date(utcDateSunset.toLocaleString());\n    const sunset = dayjs(localDateSunset).format(\"h:mm A\");\n\n    const dailyValues = action.payload.daily.map((day) => ({\n      feels_like_day: day.feels_like.day,\n      feels_like_night: day.feels_like.night,\n      humidity: day.humidity,\n      max_temp: Math.round(day.temp.max),\n      min_temp: Math.round(day.temp.min),\n      pop: Math.round(day.pop * 100),\n      id: day.weather[0].id,\n      mainDescription: day.weather[0].main,\n      description: day.weather[0].description,\n      icon: day.weather[0].icon,\n      date_time: (() => {\n        const utcDate = new Date(day.dt * 1000);\n        const localDate = new Date(utcDate.toLocaleString());\n        return new Intl.DateTimeFormat(state.DateTimeLanguage, {\n          weekday: \"long\",\n        }).format(localDate);\n      })(),\n      sunrise: (() => {\n        const utcDate = new Date(day.sunrise * 1000);\n        const localDate = new Date(utcDate.toLocaleString());\n        return dayjs(localDate).format(\"h:mm A\");\n      })(),\n      sunset: (() => {\n        const utcDate = new Date(day.sunset * 1000);\n        const localDate = new Date(utcDate.toLocaleString());\n        return dayjs(localDate).format(\"h:mm A\");\n      })(),\n    }));\n    const hourlyValues = action.payload.hourly.map((hour) => ({\n      date_time: (() => {\n        const utcDate = new Date(hour.dt * 1000);\n        const localDate = new Date(utcDate.toLocaleString());\n        return dayjs(localDate).format(\"h A\");\n      })(),\n      feels_like: hour.feels_like,\n      humidity: hour.humidity,\n      pop: Math.round(hour.pop * 100),\n      temp: Math.round(hour.temp),\n      id: hour.weather[0].id,\n      mainDescription: hour.weather[0].main,\n      description: hour.weather[0].description,\n      icon: hour.weather[0].icon,\n    }));\n    return {\n      ...state,\n      weather: {\n        dateTime: dayOfWeek,\n        isWeatherLoaded: true,\n        feels_like: feels_like,\n        humidity: humidity,\n        temp: temp,\n        mainDescription: mainDescription,\n        description: description,\n        icon: icon,\n        uvi: uvi,\n        wind_speed: wind_speed,\n        clouds: clouds,\n        sunrise: sunrise,\n        sunset: sunset,\n        dailyValues: dailyValues,\n        hourlyValues: hourlyValues,\n        ...action.payload,\n      },\n    };\n  }\n  if (action.type == \"ON_LANGUAGE\") {\n    if(action.payload == 'en') {\n      return {\n        ...state,\n        strings: English,\n        DateTimeLanguage: \"en-us\",\n        apiLanguage: \"en\"\n      };\n    }\n    if (action.payload == \"es\") {\n      return {\n        ...state,\n        strings: Spanish,\n        DateTimeLanguage: \"es\",\n        apiLanguage: \"es\",\n      };\n    }\n    if (action.payload == \"fr\") {\n      return {\n        ...state,\n        strings: French,\n        DateTimeLanguage: \"fr\",\n        apiLanguage: \"fr\",\n      };\n    }\n    if (action.payload == \"vi\") {\n      return {\n        ...state,\n        strings: Vietnamese,\n        DateTimeLanguage: \"vi\",\n        apiLanguage: \"vi\",\n      };\n    }\n    if (action.payload == \"zh_cn\") {\n      return {\n        ...state,\n        strings: Chinese,\n        DateTimeLanguage: \"zh-cn\",\n        apiLanguage: \"zh_cn\",\n      };\n    }\n  }\n  if (action.type == 'ON_UNITS' ) {\n    if(action.payload == \"imperial\") {\n      return {\n        ...state,\n        tempUnitSymbol: \"F\",\n        tempUnit: \"imperial\",\n        windSpeedUnits: \"mph\",\n      };\n    }\n    if (action.payload == 'metric') {\n      return {\n        ...state,\n        tempUnitSymbol: \"C\",\n        tempUnit: \"metric\",\n        windSpeedUnits: \"mps\",\n      };\n    }\n  }\n  return state;\n};\n\nexport default reducer;\n","/Users/Cristina/Desktop/nimbus/client/src/components/getCityFromCoordinates.js",["120"],"import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\n\n \nfunction  GetCityFromCoordinates () {\n    \n    const [city, setCity] = useState({\n      city: \"\"\n    });\n\n    let latitude = 33.93466913794421;\n    let longitude = -84.381074665022;\n    let apiKey = 'AIzaSyDHy8QmVO1C4nSFZhTo9KZZ24Py0IuHrY4'\n    let apiURL = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&result_type=locality&key=${apiKey}`;\n    \n    const getCity = async () => {\n        const response = await axios.get(apiURL);\n        const result = response.data\n        console.log(result.results[0].formatted_address)\n            //.results[0].address_components[3].long_name)\n        \n        \n        setCity(result.results[0].address_components[3].long_name);\n    }\n\n    useEffect(() => {\n        getCity()\n    })\n    \n    return(\n        <div>\n            <h1>Test Component</h1>\n            <h2>hi</h2>\n        </div>\n    )\n}\n\n// Sandy Springs Coordinates\n// 33.751649691183076, -84.39383248335515;\n// 33.93466913794421, -84.381074665022\n\n// Glennville\n// 31.940284662191612, -81.92454235966069\n\n//Paris coordinates\n// 48.859677617673164, 2.350486869835329\n\nexport default GetCityFromCoordinates","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeather.js",["121","122"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport '../styles/currentWeather.css'\nimport Button from \"react-bootstrap/Button\"; \n\nfunction CurrentWeather(props) {\n  return (\n    <div className=\"current-weather-div\">\n      {/* <h2>Current Weather Box</h2> */}\n      {props.weather.isWeatherLoaded ? (\n        <>\n          {/* <div className=\"favorite\">\n            <Button variant=\"outline-info\" size=\"sm\">\n              {props.strings.favorite_button}\n            </Button>\n          </div> */}\n          <h1 id=\"city\">{props.weather.city}</h1>\n          <h2>{props.weather.description}</h2>\n          <img\n            src={`http://openweathermap.org/img/wn/${props.weather.icon}@2x.png`}\n          ></img>\n          <p id=\"temp\">\n            {props.weather.temp} &deg;{props.tempUnitSymbol}{\" \"}\n          </p>\n          {/* <p> Feels Like: {props.weather.feels_like} &deg;F </p>\n          <p>💧 {props.weather.humidity} %</p>\n          <p>\n            {\" \"}\n            🌝 {props.weather.sunrise} | 🌚 {props.weather.sunset}\n          </p> */}\n        </>\n      ) : (\n        <p></p>\n      )}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      weather: state.weather,\n      strings: state.strings,\n      tempUnit: state.tempUnit,\n      tempUnitSymbol: state.tempUnitSymbol\n    };\n}\n\nexport default connect(mapStateToProps)(CurrentWeather);\n","/Users/Cristina/Desktop/nimbus/client/src/components/DailyWeather.js",["123"],"import React from 'react'\nimport { connect } from \"react-redux\";\nimport \"../styles/dailyWeather.css\"\n\nfunction DailyWeather(props) {\n    console.log(props)\n    // if (!props.weather.isWeatherLoaded) {\n    //   return \"\";\n    // }\n\n    return (\n      <div className=\"daily-main-div\">\n        {props.weather.dailyValues.map((day) => (\n          <div className=\"day-div\">\n            <div className=\"weekday\">\n              <p>{day.date_time}</p>\n            </div>\n            <div className=\"icon\">\n              <img\n                src={`http://openweathermap.org/img/wn/${day.icon}@2x.png`}\n              ></img>\n            </div>\n            <div className=\"pop-temp-flex\">\n              {day.id < 700 ? (<div className=\"pop\">\n              <p>{day.pop} %</p>\n            </div>): ('')}\n            \n            <div className=\"temp\">\n              <p>\n                <b>{day.max_temp} </b> | {day.min_temp}\n              </p>\n            </div>\n            </div>\n          </div>\n        ))}\n        {/* <div className=\"day-div\">\n          <div className=\"weekday\">\n            <p>Friday</p>\n          </div>\n          <div className=\"icon\">\n            <img src={\"http://openweathermap.org/img/wn/10d@2x.png\"}></img>\n          </div>\n          <div className=\"temp\">\n            <p>84 &deg;F</p>\n          </div>\n        </div>\n\n        <div className=\"day-div\">\n          <div className=\"weekday\">\n            <p>Saturday</p>\n          </div>\n          <div className=\"icon\">\n            <img src={\"http://openweathermap.org/img/wn/10d@2x.png\"}></img>\n          </div>\n          <div className=\"temp\">\n            <p>84 &deg;F</p>\n          </div>\n        </div>\n\n        <div className=\"day-div\">\n          <div className=\"weekday\">\n            <p>Sunday</p>\n          </div>\n          <div className=\"icon\">\n            <img src={\"http://openweathermap.org/img/wn/10d@2x.png\"}></img>\n          </div>\n          <div className=\"temp\">\n            <p>84 &deg;F</p>\n          </div>\n        </div> */}\n      </div>\n    );\n}\n\n// need to connect to redux global store to get weather values\nconst mapStateToProps = (state) => {\n    return {\n        weather: state.weather\n    }\n}\n\n\nexport default connect(mapStateToProps)(DailyWeather)","/Users/Cristina/Desktop/nimbus/client/src/components/CurrentWeatherDetails.js",[],"/Users/Cristina/Desktop/nimbus/client/src/components/Cloud.js",[],"/Users/Cristina/Desktop/nimbus/client/src/components/Footer.js",[],"/Users/Cristina/Desktop/nimbus/client/src/components/HourlyWeather.js",["124"],"import React from 'react'\nimport { connect } from 'react-redux'\nimport \"../styles/hourlyWeather.css\"\n\n\nfunction HourlyWeather(props) {\n  \n  return (\n    <div className=\"hourly-main-div\">\n      {props.weather.hourlyValues.map((hour) => (\n        <div className=\"hour-div\">\n          <div className=\"hour\">\n            <p>{hour.date_time}</p>\n            {hour.id < 700 ? (\n              <p className=\"rain\"> {hour.pop} %</p>\n            ) : (\n              <p className=\"invisible rain\">.</p>\n            )}\n          </div>\n          <div className=\"hour-icon\">\n            <img\n              src={`http://openweathermap.org/img/wn/${hour.icon}@2x.png`}\n            ></img>\n          </div>\n          <div className=\"hour-temp\">\n            <p>\n              <b>{hour.temp} </b>\n            </p>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    weather: state.weather,\n  };\n};\n\nexport default connect(mapStateToProps)(HourlyWeather)","/Users/Cristina/Desktop/nimbus/client/src/components/languages/languages.js",["125"],"// languages object\n\nconst English = {\n  favorites: \"Favorites\",\n  hourly_forecast: \"Hourly Forecast\",\n  daily_forecast: \"7 Day Forecast\",\n  logout: \"Logout\",\n  enter_city: \"Enter City\",\n  search: \"Search\",\n  favorite_button: \"Favorite\",\n  feels_like: \"Feels Like\",\n  humidity: \"Humidity\",\n  sunrise: \"sunrise\",\n  sunset: \"sunset\",\n  cloudiness: \"Cloudiness\",\n  wind_speed: \"Wind Speed\",\n  uv_index: \"UV Index\",\n  address: \"Address\",\n  city_zip: \"City, zip code\",\n  zip_code: \"zip code\",\n  add: \"Add\",\n  languages: \"Languages\",\n  english: \"English\",\n  spanish: \"Spanish\",\n  french: \"French\",\n  vietnamese: \"Vietnamese\",\n  chinese: \"Chinese (Simplified)\",\n  units: \"Units\",\n  fahrenheit: \"Fahrenheit\",\n  celsius: \"Celsius\",\n};\n\nconst Spanish = {\n  favorites: \"Favoritos\",\n  hourly_forecast: \"Por hora\",\n  daily_forecast: \"7 días\",\n  logout: \"Cerrar sesión\",\n  enter_city: \"Buscar ciudad\",\n  search: \"Buscar\",\n  favorite_button: \"Favorito\",\n  feels_like: \"Sensación térmica\",\n  humidity: \"Humedad\",\n  sunrise: \"Amanecer\",\n  sunset: \"Puesta del sol\",\n  cloudiness: \"Nubosidad\",\n  wind_speed: \"Viento\",\n  uv_index: \"Índice UV\",\n  address: \"Direccion\",\n  zip_code: \"código postal\",\n  city_zip: \"ciudad,código postal\",\n  zip_code: \"código postal\",\n  add: \"Añadir\",\n  languages: \"Idiomas\",\n  english: \"Inglés | English\",\n  spanish: \"Español | Spanish\",\n  french: \"Francés | French\",\n  vietnamese: \"Vietnamita | Vietnamese\",\n  chinese: \"Chino | Chinese (Simplified)\",\n  units: \"Unidades\",\n  fahrenheit: \"Fahrenheit\",\n  celsius: \"Celsius\",\n};\n\nconst French = {\n  favorites: \"Préféré\",\n  hourly_forecast: \"Par heure\",\n  daily_forecast: \"7 jours\",\n  logout: \"Se déconnecter\",\n  enter_city: \"Recherche de ville\",\n  search: \"Recherche\",\n  favorite_button: \"Préféré\",\n  feels_like: \"T. ressentie\",\n  humidity: \"Humidité\",\n  sunrise: \"Lever du soleil\",\n  sunset: \"le coucher du soleil\",\n  cloudiness: \"Nébulosité\",\n  wind_speed: \"Vent\",\n  uv_index: \"Indice UV\",\n  address: \"adresse\",\n  city_zip: \"ville, code postal\",\n  zip_code: \"code postal\",\n  add: \"Ajouter\",\n  languages: \"Langues\",\n  english: \"Anglais | English\",\n  spanish: \"Espagnol | Spanish\",\n  french: \"Français | French\",\n  vietnamese: \"Vietnamienne | Vietnamese\",\n  chinese: \"Chinois | Chinese (Simplified)\",\n  units: \"Unités\",\n  fahrenheit: \"Fahrenheit\",\n  celsius: \"Celsius\",\n};\n\nconst Vietnamese = {\n  // favorites: \"Préféré\",\n  hourly_forecast: \"Hàng giờ\",\n  daily_forecast: \"7 ngày\",\n  //logout: \"Se déconnecter\",\n  enter_city: \"Tim thành phố\",\n  search: \"Tim\",\n  //favorite_button: \"Préféré\",\n  feels_like: \"Cảm giác như\",\n  humidity: \"Độ ẩm\",\n  sunrise: \"bình Minh\",\n  sunset: \"Hoàng hôn\",\n  cloudiness: \"mây mù\",\n  wind_speed: \"Gió\",\n  uv_index: \"Chỉ số UV\",\n  //address: \"adresse\",\n  //city_zip: \"ville, code postal\",\n  //zip_code: \"code postal\",\n  //add: \"Ajouter\",\n  languages: \"ngôn ngữ\",\n  english: \"Tiếng Anh | English\",\n  spanish: \"người Tây Ban Nha | Spanish\",\n  french: \"người Pháp | French\",\n  vietnamese: \"Tiếng Việt | Vietnamese\",\n  chinese: \"người Trung Quốc | Chinese (Simplified)\",\n  units: \"các đơn vị\",\n  fahrenheit: \"độ F\",\n  celsius: \"độ C\",\n};\n\nconst Chinese = {\n  // favorites: \"Préféré\",\n  hourly_forecast: \"每小时\",\n  daily_forecast: \"7 天\",\n  //logout: \"Se déconnecter\",\n  enter_city: \"搜索城市\",\n  search: \"搜索\",\n  //favorite_button: \"Préféré\",\n  feels_like: \"体感温度\",\n  humidity: \"湿度\",\n  sunrise: \"日出\",\n  sunset: \"日落\",\n  cloudiness: \"浑浊\",\n  wind_speed: \"大风\",\n  uv_index: \"紫外线指数\",\n  //address: \"adresse\",\n  //city_zip: \"ville, code postal\",\n  //zip_code: \"code postal\",\n  //add: \"Ajouter\",\n  languages: \"语言\",\n  english: \"英语 | English\",\n  spanish: \"西班牙文 | Spanish\",\n  french: \"法国人 | French\",\n  vietnamese: \"越南语 | Vietnamese\",\n  chinese: \"中文 | Chinese (Simplified)\",\n  units: \"单位\",\n  fahrenheit: \"华氏度 | Fahrenheit\",\n  celsius: \"摄氏温度 | Celsius\",\n};\n\n\n\n\n\nexport {\n  English,\n  Spanish,\n  French,\n  Vietnamese,\n  Chinese,\n};\n","/Users/Cristina/Desktop/nimbus/client/src/services/useWindowDimensions.js",[],{"ruleId":"126","severity":1,"message":"127","line":4,"column":8,"nodeType":"128","messageId":"129","endLine":4,"endColumn":11},{"ruleId":"126","severity":1,"message":"130","line":8,"column":8,"nodeType":"128","messageId":"129","endLine":8,"endColumn":13},{"ruleId":"126","severity":1,"message":"131","line":9,"column":8,"nodeType":"128","messageId":"129","endLine":9,"endColumn":16},{"ruleId":"126","severity":1,"message":"132","line":11,"column":8,"nodeType":"128","messageId":"129","endLine":11,"endColumn":17},{"ruleId":"126","severity":1,"message":"133","line":15,"column":8,"nodeType":"128","messageId":"129","endLine":15,"endColumn":30},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"126","severity":1,"message":"138","line":1,"column":8,"nodeType":"128","messageId":"129","endLine":1,"endColumn":12},{"ruleId":"126","severity":1,"message":"139","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":25},{"ruleId":"126","severity":1,"message":"140","line":1,"column":27,"nodeType":"128","messageId":"129","endLine":1,"endColumn":36},{"ruleId":"126","severity":1,"message":"141","line":3,"column":8,"nodeType":"128","messageId":"129","endLine":3,"endColumn":14},{"ruleId":"126","severity":1,"message":"142","line":4,"column":8,"nodeType":"128","messageId":"129","endLine":4,"endColumn":14},{"ruleId":"126","severity":1,"message":"140","line":1,"column":27,"nodeType":"128","messageId":"129","endLine":1,"endColumn":36},{"ruleId":"126","severity":1,"message":"140","line":1,"column":27,"nodeType":"128","messageId":"129","endLine":1,"endColumn":36},{"ruleId":"126","severity":1,"message":"140","line":1,"column":27,"nodeType":"128","messageId":"129","endLine":1,"endColumn":36},{"ruleId":"126","severity":1,"message":"143","line":8,"column":10,"nodeType":"128","messageId":"129","endLine":8,"endColumn":17},{"ruleId":"126","severity":1,"message":"139","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":25},{"ruleId":"144","severity":1,"message":"145","line":22,"column":6,"nodeType":"146","endLine":22,"endColumn":8,"suggestions":"147"},{"ruleId":"148","severity":1,"message":"149","line":23,"column":19,"nodeType":"150","messageId":"151","endLine":23,"endColumn":21},{"ruleId":"148","severity":1,"message":"149","line":113,"column":19,"nodeType":"150","messageId":"151","endLine":113,"endColumn":21},{"ruleId":"148","severity":1,"message":"149","line":114,"column":23,"nodeType":"150","messageId":"151","endLine":114,"endColumn":25},{"ruleId":"148","severity":1,"message":"149","line":122,"column":24,"nodeType":"150","messageId":"151","endLine":122,"endColumn":26},{"ruleId":"148","severity":1,"message":"149","line":130,"column":24,"nodeType":"150","messageId":"151","endLine":130,"endColumn":26},{"ruleId":"148","severity":1,"message":"149","line":138,"column":24,"nodeType":"150","messageId":"151","endLine":138,"endColumn":26},{"ruleId":"148","severity":1,"message":"149","line":146,"column":24,"nodeType":"150","messageId":"151","endLine":146,"endColumn":26},{"ruleId":"148","severity":1,"message":"149","line":155,"column":19,"nodeType":"150","messageId":"151","endLine":155,"endColumn":21},{"ruleId":"148","severity":1,"message":"149","line":156,"column":23,"nodeType":"150","messageId":"151","endLine":156,"endColumn":25},{"ruleId":"148","severity":1,"message":"149","line":164,"column":24,"nodeType":"150","messageId":"151","endLine":164,"endColumn":26},{"ruleId":"126","severity":1,"message":"152","line":8,"column":12,"nodeType":"128","messageId":"129","endLine":8,"endColumn":16},{"ruleId":"126","severity":1,"message":"142","line":4,"column":8,"nodeType":"128","messageId":"129","endLine":4,"endColumn":14},{"ruleId":"153","severity":1,"message":"154","line":19,"column":11,"nodeType":"155","endLine":21,"endColumn":12},{"ruleId":"153","severity":1,"message":"154","line":19,"column":15,"nodeType":"155","endLine":21,"endColumn":16},{"ruleId":"153","severity":1,"message":"154","line":21,"column":13,"nodeType":"155","endLine":23,"endColumn":14},{"ruleId":"156","severity":1,"message":"157","line":51,"column":3,"nodeType":"158","messageId":"151","endLine":51,"endColumn":11},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'Login' is defined but never used.","'Register' is defined but never used.","'Favorites' is defined but never used.","'getCityFromCoordinates' is defined but never used.","no-native-reassign",["159"],"no-negated-in-lhs",["160"],"'logo' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Navbar' is defined but never used.","'Button' is defined but never used.","'NavLink' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getLocation'. Either include it or remove the dependency array.","ArrayExpression",["161"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'city' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-dupe-keys","Duplicate key 'zip_code'.","ObjectExpression","no-global-assign","no-unsafe-negation",{"desc":"162","fix":"163"},"Update the dependencies array to be: [getLocation]",{"range":"164","text":"165"},[817,819],"[getLocation]"]